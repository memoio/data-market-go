// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package filedid

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FiledidMetaData contains all meta data concerning the Filedid contract.
var FiledidMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memoDid\",\"type\":\"string\"}],\"name\":\"BuyRead\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"controller\",\"type\":\"string\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enumIFileDid.FileType\",\"name\":\"ftype\",\"type\":\"uint8\"}],\"name\":\"ChangeFtype\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"keywords\",\"type\":\"string[]\"}],\"name\":\"ChangeKeywords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ChangePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deactivate\",\"type\":\"bool\"}],\"name\":\"DeactivateMfileDid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memoDid\",\"type\":\"string\"}],\"name\":\"DeactivateRead\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memoDid\",\"type\":\"string\"}],\"name\":\"GrantRead\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"}],\"name\":\"RegisterMfileDid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"bytes[5]\",\"name\":\"signs\",\"type\":\"bytes[5]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"memoDid\",\"type\":\"string\"}],\"name\":\"buyRead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_controller\",\"type\":\"string\"}],\"name\":\"changeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"internalType\":\"enumIFileDid.FileType\",\"name\":\"_ftype\",\"type\":\"uint8\"}],\"name\":\"changeFtype\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_keywords\",\"type\":\"string[]\"}],\"name\":\"changeKeywords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"encode\",\"type\":\"string\"},{\"internalType\":\"enumIFileDid.FileType\",\"name\":\"ftype\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"controller\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deactivated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_deactivate\",\"type\":\"bool\"}],\"name\":\"deactivateMfileDid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"memoDid\",\"type\":\"string\"}],\"name\":\"deactivateRead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"}],\"name\":\"deactivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"}],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"}],\"name\":\"getEncode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"}],\"name\":\"getFtype\",\"outputs\":[{\"internalType\":\"enumIFileDid.FileType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"}],\"name\":\"getKeywords\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"memoDid\",\"type\":\"string\"}],\"name\":\"grantRead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mfileDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_encode\",\"type\":\"string\"},{\"internalType\":\"enumIFileDid.FileType\",\"name\":\"_ftype\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_controller\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_keywords\",\"type\":\"string[]\"}],\"name\":\"registerMfileDid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003167380380620031678339818101604052810190620000379190620000eb565b8080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200011d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b38262000086565b9050919050565b620000c581620000a6565b8114620000d157600080fd5b50565b600081519050620000e581620000ba565b92915050565b60006020828403121562000104576200010362000081565b5b60006200011484828501620000d4565b91505092915050565b61303a806200012d6000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c806364c21f2c116100ad578063a870fcc711610071578063a870fcc714610364578063ca0258dc14610380578063de9375f21461039c578063dff5b013146103ba578063f100cfd3146103ea5761012b565b806364c21f2c146102b057806384435ce2146102cc57806386e9dbc6146102fc5780638c97f99e146103185780639aad0566146103485761012b565b8063380cc539116100f4578063380cc539146101e85780634bf1b13414610218578063524f38891461023457806352a0fead1461026457806363a27111146102805761012b565b806269c14014610130578063022914a71461014c57806304f6748c1461017c5780631fa19596146101b057806337c52d83146101cc575b600080fd5b61014a60048036038101906101459190611cd6565b61041a565b005b61016660048036038101906101619190611dac565b61064c565b6040516101739190611df4565b60405180910390f35b61019660048036038101906101919190611e0f565b61066c565b6040516101a7959493929190611f67565b60405180910390f35b6101ca60048036038101906101c59190611ff4565b6107e2565b005b6101e660048036038101906101e19190611cd6565b610953565b005b61020260048036038101906101fd9190611e0f565b610b84565b60405161020f919061215c565b60405180910390f35b610232600480360381019061022d919061231f565b610c7e565b005b61024e60048036038101906102499190611e0f565b610e1b565b60405161025b919061238e565b60405180910390f35b61027e600480360381019061027991906123ce565b610e46565b005b61029a60048036038101906102959190611e0f565b610fda565b6040516102a7919061242a565b60405180910390f35b6102ca60048036038101906102c5919061252d565b61108d565b005b6102e660048036038101906102e19190611e0f565b61120e565b6040516102f39190611df4565b60405180910390f35b610316600480360381019061031191906125a5565b611246565b005b610332600480360381019061032d9190611cd6565b611347565b60405161033f919061261d565b60405180910390f35b610362600480360381019061035d9190611cd6565b61139c565b005b61037e60048036038101906103799190611cd6565b611516565b005b61039a60048036038101906103959190612638565b611747565b005b6103a4611991565b6040516103b19190612744565b60405180910390f35b6103d460048036038101906103cf9190611e0f565b6119b7565b6040516103e1919061275f565b60405180910390f35b61040460048036038101906103ff9190611e0f565b6119ef565b604051610411919061242a565b60405180910390f35b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166104a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049c906127c6565b60405180910390fd5b6002826040516104b59190612822565b908152602001604051809103902060060160009054906101000a900460ff1615610514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050b90612885565b60405180910390fd5b60006002836040516105269190612822565b9081526020016040518091039020600501826040516105459190612822565b908152602001604051809103902060009054906101000a900460ff1660ff16146105a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059b906128f1565b60405180910390fd5b60016002836040516105b69190612822565b9081526020016040518091039020600501826040516105d59190612822565b908152602001604051809103902060006101000a81548160ff021916908360ff160217905550816040516106099190612822565b60405180910390207f9a23ee694031b7714b282fb4f89b349db581b6c5fb20fb299897b2dbb5b6510a82604051610640919061242a565b60405180910390a25050565b60006020528060005260406000206000915054906101000a900460ff1681565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090508060000180546106a590612940565b80601f01602080910402602001604051908101604052809291908181526020018280546106d190612940565b801561071e5780601f106106f35761010080835404028352916020019161071e565b820191906000526020600020905b81548152906001019060200180831161070157829003601f168201915b5050505050908060010160009054906101000a900460ff169080600201805461074690612940565b80601f016020809104026020016040519081016040528092919081815260200182805461077290612940565b80156107bf5780601f10610794576101008083540402835291602001916107bf565b820191906000526020600020905b8154815290600101906020018083116107a257829003601f168201915b5050505050908060030154908060060160009054906101000a900460ff16905085565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661086d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610864906127c6565b60405180910390fd5b60028260405161087d9190612822565b908152602001604051809103902060060160009054906101000a900460ff16156108dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d390612885565b60405180910390fd5b806002836040516108ed9190612822565b908152602001604051809103902060030181905550816040516109109190612822565b60405180910390207f0868ddc93d8bff1d2b8931574f1250319ab20dc6cdf2a7f86d5eee192ea1c98682604051610947919061238e565b60405180910390a25050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d5906127c6565b60405180910390fd5b6002826040516109ee9190612822565b908152602001604051809103902060060160009054906101000a900460ff1615610a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4490612885565b60405180910390fd5b60028083604051610a5e9190612822565b908152602001604051809103902060050182604051610a7d9190612822565b908152602001604051809103902060009054906101000a900460ff1660ff1614610adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad3906129bd565b60405180910390fd5b6000600283604051610aee9190612822565b908152602001604051809103902060050182604051610b0d9190612822565b908152602001604051809103902060006101000a81548160ff021916908360ff16021790555081604051610b419190612822565b60405180910390207f9d679cd38c09c06f29e83ac51c57df2602453a9336575359346cfab8a8f3260682604051610b78919061242a565b60405180910390a25050565b6060600282604051610b969190612822565b9081526020016040518091039020600401805480602002602001604051908101604052809291908181526020016000905b82821015610c73578382906000526020600020018054610be690612940565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1290612940565b8015610c5f5780601f10610c3457610100808354040283529160200191610c5f565b820191906000526020600020905b815481529060010190602001808311610c4257829003601f168201915b505050505081526020019060010190610bc7565b505050509050919050565b6000833b905060008103610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90612a29565b60405180910390fd5b6000308585604051602001610cde93929190612b25565b604051602081830303815290604052805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a96bba9d82856040518363ffffffff1660e01b8152600401610d53929190612c91565b600060405180830381600087803b158015610d6d57600080fd5b505af1158015610d81573d6000803e3d6000fd5b50505050836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f938b2a24c98e4e542127ffa74a91e48942c2bddccae3b6d75f82bfda7bbc08078585604051610e0c929190612cc1565b60405180910390a15050505050565b6000600282604051610e2d9190612822565b9081526020016040518091039020600301549050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec8906127c6565b60405180910390fd5b600282604051610ee19190612822565b908152602001604051809103902060060160009054906101000a900460ff1615610f40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3790612885565b60405180910390fd5b80600283604051610f519190612822565b908152602001604051809103902060010160006101000a81548160ff02191690836001811115610f8457610f83611ed7565b5b021790555081604051610f979190612822565b60405180910390207f935721402a5ae34f86d9500f87d6acfbef247c62cc5c845f49e7ec94a0dd489682604051610fce919061275f565b60405180910390a25050565b6060600282604051610fec9190612822565b9081526020016040518091039020600201805461100890612940565b80601f016020809104026020016040519081016040528092919081815260200182805461103490612940565b80156110815780601f1061105657610100808354040283529160200191611081565b820191906000526020600020905b81548152906001019060200180831161106457829003601f168201915b50505050509050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611118576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110f906127c6565b60405180910390fd5b6002826040516111289190612822565b908152602001604051809103902060060160009054906101000a900460ff1615611187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117e90612885565b60405180910390fd5b806002836040516111989190612822565b908152602001604051809103902060040190805190602001906111bc929190611aa2565b50816040516111cb9190612822565b60405180910390207f0d0ecbde8ff7f0cbfa8a5aba6209011f194a2ab60ceb48e047f704427ebbed2e82604051611202919061215c565b60405180910390a25050565b60006002826040516112209190612822565b908152602001604051809103902060060160009054906101000a900460ff169050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166112d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c8906127c6565b60405180910390fd5b806002836040516112e29190612822565b908152602001604051809103902060060160006101000a81548160ff0219169083151502179055507f5e17ae7a2d292f907502879bb1abf12db289923734c91a05b5d0651531aebf2a828260405161133b929190612cea565b60405180910390a15050565b60006002836040516113599190612822565b9081526020016040518091039020600501826040516113789190612822565b908152602001604051809103902060009054906101000a900460ff16905092915050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141e906127c6565b60405180910390fd5b6002826040516114379190612822565b908152602001604051809103902060060160009054906101000a900460ff1615611496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148d90612885565b60405180910390fd5b806002836040516114a79190612822565b908152602001604051809103902060020190816114c49190612ec6565b50816040516114d39190612822565b60405180910390207fad2c5e83d2fbe2975f5ba70ab5c8c351ef2da897e41ce843a2eb6de9ffbf59ee8260405161150a919061242a565b60405180910390a25050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166115a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611598906127c6565b60405180910390fd5b6002826040516115b19190612822565b908152602001604051809103902060060160009054906101000a900460ff1615611610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160790612885565b60405180910390fd5b60006002836040516116229190612822565b9081526020016040518091039020600501826040516116419190612822565b908152602001604051809103902060009054906101000a900460ff1660ff16146116a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611697906128f1565b60405180910390fd5b600280836040516116b19190612822565b9081526020016040518091039020600501826040516116d09190612822565b908152602001604051809103902060006101000a81548160ff021916908360ff160217905550816040516117049190612822565b60405180910390207f94b2915a0e10afcab72fdc47f046e2d9f8c45380746ef36ed2f10afaff5390be8260405161173b919061242a565b60405180910390a25050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166117d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c9906127c6565b60405180910390fd5b60008651118015611810575060006002876040516117f09190612822565b9081526020016040518091039020600201805461180c90612940565b9050145b61184f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184690612fe4565b60405180910390fd5b846002876040516118609190612822565b9081526020016040518091039020600001908161187d9190612ec6565b508360028760405161188f9190612822565b908152602001604051809103902060010160006101000a81548160ff021916908360018111156118c2576118c1611ed7565b5b0217905550826002876040516118d89190612822565b908152602001604051809103902060020190816118f59190612ec6565b50816002876040516119079190612822565b9081526020016040518091039020600301819055508060028760405161192d9190612822565b90815260200160405180910390206004019080519060200190611951929190611aa2565b507f09f50a6181226540ba96339e43e56ab9004a370db287d9dd7db64891edc494fe86604051611981919061242a565b60405180910390a1505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002826040516119c99190612822565b908152602001604051809103902060010160009054906101000a900460ff169050919050565b6060600282604051611a019190612822565b90815260200160405180910390206000018054611a1d90612940565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4990612940565b8015611a965780601f10611a6b57610100808354040283529160200191611a96565b820191906000526020600020905b815481529060010190602001808311611a7957829003601f168201915b50505050509050919050565b828054828255906000526020600020908101928215611aea579160200282015b82811115611ae9578251829081611ad99190612ec6565b5091602001919060010190611ac2565b5b509050611af79190611afb565b5090565b5b80821115611b1b5760008181611b129190611b1f565b50600101611afc565b5090565b508054611b2b90612940565b6000825580601f10611b3d5750611b5c565b601f016020900490600052602060002090810190611b5b9190611b5f565b5b50565b5b80821115611b78576000816000905550600101611b60565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611be382611b9a565b810181811067ffffffffffffffff82111715611c0257611c01611bab565b5b80604052505050565b6000611c15611b7c565b9050611c218282611bda565b919050565b600067ffffffffffffffff821115611c4157611c40611bab565b5b611c4a82611b9a565b9050602081019050919050565b82818337600083830152505050565b6000611c79611c7484611c26565b611c0b565b905082815260208101848484011115611c9557611c94611b95565b5b611ca0848285611c57565b509392505050565b600082601f830112611cbd57611cbc611b90565b5b8135611ccd848260208601611c66565b91505092915050565b60008060408385031215611ced57611cec611b86565b5b600083013567ffffffffffffffff811115611d0b57611d0a611b8b565b5b611d1785828601611ca8565b925050602083013567ffffffffffffffff811115611d3857611d37611b8b565b5b611d4485828601611ca8565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d7982611d4e565b9050919050565b611d8981611d6e565b8114611d9457600080fd5b50565b600081359050611da681611d80565b92915050565b600060208284031215611dc257611dc1611b86565b5b6000611dd084828501611d97565b91505092915050565b60008115159050919050565b611dee81611dd9565b82525050565b6000602082019050611e096000830184611de5565b92915050565b600060208284031215611e2557611e24611b86565b5b600082013567ffffffffffffffff811115611e4357611e42611b8b565b5b611e4f84828501611ca8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e92578082015181840152602081019050611e77565b60008484015250505050565b6000611ea982611e58565b611eb38185611e63565b9350611ec3818560208601611e74565b611ecc81611b9a565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611f1757611f16611ed7565b5b50565b6000819050611f2882611f06565b919050565b6000611f3882611f1a565b9050919050565b611f4881611f2d565b82525050565b6000819050919050565b611f6181611f4e565b82525050565b600060a0820190508181036000830152611f818188611e9e565b9050611f906020830187611f3f565b8181036040830152611fa28186611e9e565b9050611fb16060830185611f58565b611fbe6080830184611de5565b9695505050505050565b611fd181611f4e565b8114611fdc57600080fd5b50565b600081359050611fee81611fc8565b92915050565b6000806040838503121561200b5761200a611b86565b5b600083013567ffffffffffffffff81111561202957612028611b8b565b5b61203585828601611ca8565b925050602061204685828601611fdf565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061209882611e58565b6120a2818561207c565b93506120b2818560208601611e74565b6120bb81611b9a565b840191505092915050565b60006120d2838361208d565b905092915050565b6000602082019050919050565b60006120f282612050565b6120fc818561205b565b93508360208202850161210e8561206c565b8060005b8581101561214a578484038952815161212b85826120c6565b9450612136836120da565b925060208a01995050600181019050612112565b50829750879550505050505092915050565b6000602082019050818103600083015261217681846120e7565b905092915050565b61218781611dd9565b811461219257600080fd5b50565b6000813590506121a48161217e565b92915050565b600067ffffffffffffffff8211156121c5576121c4611bab565b5b602082029050919050565b600080fd5b600067ffffffffffffffff8211156121f0576121ef611bab565b5b6121f982611b9a565b9050602081019050919050565b6000612219612214846121d5565b611c0b565b90508281526020810184848401111561223557612234611b95565b5b612240848285611c57565b509392505050565b600082601f83011261225d5761225c611b90565b5b813561226d848260208601612206565b91505092915050565b6000612289612284846121aa565b611c0b565b905080602084028301858111156122a3576122a26121d0565b5b835b818110156122ea57803567ffffffffffffffff8111156122c8576122c7611b90565b5b8086016122d58982612248565b855260208501945050506020810190506122a5565b5050509392505050565b600082601f83011261230957612308611b90565b5b6005612316848285612276565b91505092915050565b60008060006060848603121561233857612337611b86565b5b600061234686828701611d97565b935050602061235786828701612195565b925050604084013567ffffffffffffffff81111561237857612377611b8b565b5b612384868287016122f4565b9150509250925092565b60006020820190506123a36000830184611f58565b92915050565b600281106123b657600080fd5b50565b6000813590506123c8816123a9565b92915050565b600080604083850312156123e5576123e4611b86565b5b600083013567ffffffffffffffff81111561240357612402611b8b565b5b61240f85828601611ca8565b9250506020612420858286016123b9565b9150509250929050565b600060208201905081810360008301526124448184611e9e565b905092915050565b600067ffffffffffffffff82111561246757612466611bab565b5b602082029050602081019050919050565b600061248b6124868461244c565b611c0b565b905080838252602082019050602084028301858111156124ae576124ad6121d0565b5b835b818110156124f557803567ffffffffffffffff8111156124d3576124d2611b90565b5b8086016124e08982611ca8565b855260208501945050506020810190506124b0565b5050509392505050565b600082601f83011261251457612513611b90565b5b8135612524848260208601612478565b91505092915050565b6000806040838503121561254457612543611b86565b5b600083013567ffffffffffffffff81111561256257612561611b8b565b5b61256e85828601611ca8565b925050602083013567ffffffffffffffff81111561258f5761258e611b8b565b5b61259b858286016124ff565b9150509250929050565b600080604083850312156125bc576125bb611b86565b5b600083013567ffffffffffffffff8111156125da576125d9611b8b565b5b6125e685828601611ca8565b92505060206125f785828601612195565b9150509250929050565b600060ff82169050919050565b61261781612601565b82525050565b6000602082019050612632600083018461260e565b92915050565b60008060008060008060c0878903121561265557612654611b86565b5b600087013567ffffffffffffffff81111561267357612672611b8b565b5b61267f89828a01611ca8565b965050602087013567ffffffffffffffff8111156126a05761269f611b8b565b5b6126ac89828a01611ca8565b95505060406126bd89828a016123b9565b945050606087013567ffffffffffffffff8111156126de576126dd611b8b565b5b6126ea89828a01611ca8565b93505060806126fb89828a01611fdf565b92505060a087013567ffffffffffffffff81111561271c5761271b611b8b565b5b61272889828a016124ff565b9150509295509295509295565b61273e81611d6e565b82525050565b60006020820190506127596000830184612735565b92915050565b60006020820190506127746000830184611f3f565b92915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b60006127b0600983611e63565b91506127bb8261277a565b602082019050919050565b600060208201905081810360008301526127df816127a3565b9050919050565b600081905092915050565b60006127fc82611e58565b61280681856127e6565b9350612816818560208601611e74565b80840191505092915050565b600061282e82846127f1565b915081905092915050565b7f6d66696c65206469642064656163746976617465640000000000000000000000600082015250565b600061286f601583611e63565b915061287a82612839565b602082019050919050565b6000602082019050818103600083015261289e81612862565b9050919050565b7f616c726561647920686173000000000000000000000000000000000000000000600082015250565b60006128db600b83611e63565b91506128e6826128a5565b602082019050919050565b6000602082019050818103600083015261290a816128ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061295857607f821691505b60208210810361296b5761296a612911565b5b50919050565b7f6f6e6c792063616e2064656163746976617465206772616e7465642052500000600082015250565b60006129a7601e83611e63565b91506129b282612971565b602082019050919050565b600060208201905081810360008301526129d68161299a565b9050919050565b7f6e65656420636f6e747261637420616464720000000000000000000000000000600082015250565b6000612a13601283611e63565b9150612a1e826129dd565b602082019050919050565b60006020820190508181036000830152612a4281612a06565b9050919050565b60008160601b9050919050565b6000612a6182612a49565b9050919050565b6000612a7382612a56565b9050919050565b612a8b612a8682611d6e565b612a68565b82525050565b7f6164640000000000000000000000000000000000000000000000000000000000600082015250565b6000612ac76003836127e6565b9150612ad282612a91565b600382019050919050565b60008160f81b9050919050565b6000612af582612add565b9050919050565b6000612b0782612aea565b9050919050565b612b1f612b1a82611dd9565b612afc565b82525050565b6000612b318286612a7a565b601482019150612b4082612aba565b9150612b4c8285612a7a565b601482019150612b5c8284612b0e565b600182019150819050949350505050565b6000819050919050565b612b8081612b6d565b82525050565b600060059050919050565b600081905092915050565b6000819050919050565b600081519050919050565b600082825260208201905092915050565b6000612bcd82612ba6565b612bd78185612bb1565b9350612be7818560208601611e74565b612bf081611b9a565b840191505092915050565b6000612c078383612bc2565b905092915050565b6000602082019050919050565b6000612c2782612b86565b612c318185612b91565b935083602082028501612c4385612b9c565b8060005b85811015612c7f5784840389528151612c608582612bfb565b9450612c6b83612c0f565b925060208a01995050600181019050612c47565b50829750879550505050505092915050565b6000604082019050612ca66000830185612b77565b8181036020830152612cb88184612c1c565b90509392505050565b6000604082019050612cd66000830185612735565b612ce36020830184611de5565b9392505050565b60006040820190508181036000830152612d048185611e9e565b9050612d136020830184611de5565b9392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612d7c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d3f565b612d868683612d3f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612dc3612dbe612db984611f4e565b612d9e565b611f4e565b9050919050565b6000819050919050565b612ddd83612da8565b612df1612de982612dca565b848454612d4c565b825550505050565b600090565b612e06612df9565b612e11818484612dd4565b505050565b5b81811015612e3557612e2a600082612dfe565b600181019050612e17565b5050565b601f821115612e7a57612e4b81612d1a565b612e5484612d2f565b81016020851015612e63578190505b612e77612e6f85612d2f565b830182612e16565b50505b505050565b600082821c905092915050565b6000612e9d60001984600802612e7f565b1980831691505092915050565b6000612eb68383612e8c565b9150826002028217905092915050565b612ecf82611e58565b67ffffffffffffffff811115612ee857612ee7611bab565b5b612ef28254612940565b612efd828285612e39565b600060209050601f831160018114612f305760008415612f1e578287015190505b612f288582612eaa565b865550612f90565b601f198416612f3e86612d1a565b60005b82811015612f6657848901518255600182019150602085019450602081019050612f41565b86831015612f835784890151612f7f601f891682612e8c565b8355505b6001600288020188555050505b505050505050565b7f6578697374656400000000000000000000000000000000000000000000000000600082015250565b6000612fce600783611e63565b9150612fd982612f98565b602082019050919050565b60006020820190508181036000830152612ffd81612fc1565b905091905056fea26469706673582212209a6791b25f0690f6a15f0c73801113b80ae637736183732480a15fd5f832bf3864736f6c63430008100033",
}

// FiledidABI is the input ABI used to generate the binding from.
// Deprecated: Use FiledidMetaData.ABI instead.
var FiledidABI = FiledidMetaData.ABI

// FiledidBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FiledidMetaData.Bin instead.
var FiledidBin = FiledidMetaData.Bin

// DeployFiledid deploys a new Ethereum contract, binding an instance of Filedid to it.
func DeployFiledid(auth *bind.TransactOpts, backend bind.ContractBackend, _auth common.Address) (common.Address, *types.Transaction, *Filedid, error) {
	parsed, err := FiledidMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FiledidBin), backend, _auth)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Filedid{FiledidCaller: FiledidCaller{contract: contract}, FiledidTransactor: FiledidTransactor{contract: contract}, FiledidFilterer: FiledidFilterer{contract: contract}}, nil
}

// Filedid is an auto generated Go binding around an Ethereum contract.
type Filedid struct {
	FiledidCaller     // Read-only binding to the contract
	FiledidTransactor // Write-only binding to the contract
	FiledidFilterer   // Log filterer for contract events
}

// FiledidCaller is an auto generated read-only Go binding around an Ethereum contract.
type FiledidCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FiledidTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FiledidTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FiledidFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FiledidFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FiledidSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FiledidSession struct {
	Contract     *Filedid          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FiledidCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FiledidCallerSession struct {
	Contract *FiledidCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// FiledidTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FiledidTransactorSession struct {
	Contract     *FiledidTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// FiledidRaw is an auto generated low-level Go binding around an Ethereum contract.
type FiledidRaw struct {
	Contract *Filedid // Generic contract binding to access the raw methods on
}

// FiledidCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FiledidCallerRaw struct {
	Contract *FiledidCaller // Generic read-only contract binding to access the raw methods on
}

// FiledidTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FiledidTransactorRaw struct {
	Contract *FiledidTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFiledid creates a new instance of Filedid, bound to a specific deployed contract.
func NewFiledid(address common.Address, backend bind.ContractBackend) (*Filedid, error) {
	contract, err := bindFiledid(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Filedid{FiledidCaller: FiledidCaller{contract: contract}, FiledidTransactor: FiledidTransactor{contract: contract}, FiledidFilterer: FiledidFilterer{contract: contract}}, nil
}

// NewFiledidCaller creates a new read-only instance of Filedid, bound to a specific deployed contract.
func NewFiledidCaller(address common.Address, caller bind.ContractCaller) (*FiledidCaller, error) {
	contract, err := bindFiledid(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FiledidCaller{contract: contract}, nil
}

// NewFiledidTransactor creates a new write-only instance of Filedid, bound to a specific deployed contract.
func NewFiledidTransactor(address common.Address, transactor bind.ContractTransactor) (*FiledidTransactor, error) {
	contract, err := bindFiledid(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FiledidTransactor{contract: contract}, nil
}

// NewFiledidFilterer creates a new log filterer instance of Filedid, bound to a specific deployed contract.
func NewFiledidFilterer(address common.Address, filterer bind.ContractFilterer) (*FiledidFilterer, error) {
	contract, err := bindFiledid(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FiledidFilterer{contract: contract}, nil
}

// bindFiledid binds a generic wrapper to an already deployed contract.
func bindFiledid(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FiledidABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Filedid *FiledidRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Filedid.Contract.FiledidCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Filedid *FiledidRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Filedid.Contract.FiledidTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Filedid *FiledidRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Filedid.Contract.FiledidTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Filedid *FiledidCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Filedid.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Filedid *FiledidTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Filedid.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Filedid *FiledidTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Filedid.Contract.contract.Transact(opts, method, params...)
}

// Auth is a free data retrieval call binding the contract method 0xde9375f2.
//
// Solidity: function auth() view returns(address)
func (_Filedid *FiledidCaller) Auth(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Filedid.contract.Call(opts, &out, "auth")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Auth is a free data retrieval call binding the contract method 0xde9375f2.
//
// Solidity: function auth() view returns(address)
func (_Filedid *FiledidSession) Auth() (common.Address, error) {
	return _Filedid.Contract.Auth(&_Filedid.CallOpts)
}

// Auth is a free data retrieval call binding the contract method 0xde9375f2.
//
// Solidity: function auth() view returns(address)
func (_Filedid *FiledidCallerSession) Auth() (common.Address, error) {
	return _Filedid.Contract.Auth(&_Filedid.CallOpts)
}

// Data is a free data retrieval call binding the contract method 0x04f6748c.
//
// Solidity: function data(string ) view returns(string encode, uint8 ftype, string controller, uint256 price, bool deactivated)
func (_Filedid *FiledidCaller) Data(opts *bind.CallOpts, arg0 string) (struct {
	Encode      string
	Ftype       uint8
	Controller  string
	Price       *big.Int
	Deactivated bool
}, error) {
	var out []interface{}
	err := _Filedid.contract.Call(opts, &out, "data", arg0)

	outstruct := new(struct {
		Encode      string
		Ftype       uint8
		Controller  string
		Price       *big.Int
		Deactivated bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Encode = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Ftype = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.Controller = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Price = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Deactivated = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// Data is a free data retrieval call binding the contract method 0x04f6748c.
//
// Solidity: function data(string ) view returns(string encode, uint8 ftype, string controller, uint256 price, bool deactivated)
func (_Filedid *FiledidSession) Data(arg0 string) (struct {
	Encode      string
	Ftype       uint8
	Controller  string
	Price       *big.Int
	Deactivated bool
}, error) {
	return _Filedid.Contract.Data(&_Filedid.CallOpts, arg0)
}

// Data is a free data retrieval call binding the contract method 0x04f6748c.
//
// Solidity: function data(string ) view returns(string encode, uint8 ftype, string controller, uint256 price, bool deactivated)
func (_Filedid *FiledidCallerSession) Data(arg0 string) (struct {
	Encode      string
	Ftype       uint8
	Controller  string
	Price       *big.Int
	Deactivated bool
}, error) {
	return _Filedid.Contract.Data(&_Filedid.CallOpts, arg0)
}

// Deactivated is a free data retrieval call binding the contract method 0x84435ce2.
//
// Solidity: function deactivated(string mfileDid) view returns(bool)
func (_Filedid *FiledidCaller) Deactivated(opts *bind.CallOpts, mfileDid string) (bool, error) {
	var out []interface{}
	err := _Filedid.contract.Call(opts, &out, "deactivated", mfileDid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Deactivated is a free data retrieval call binding the contract method 0x84435ce2.
//
// Solidity: function deactivated(string mfileDid) view returns(bool)
func (_Filedid *FiledidSession) Deactivated(mfileDid string) (bool, error) {
	return _Filedid.Contract.Deactivated(&_Filedid.CallOpts, mfileDid)
}

// Deactivated is a free data retrieval call binding the contract method 0x84435ce2.
//
// Solidity: function deactivated(string mfileDid) view returns(bool)
func (_Filedid *FiledidCallerSession) Deactivated(mfileDid string) (bool, error) {
	return _Filedid.Contract.Deactivated(&_Filedid.CallOpts, mfileDid)
}

// GetController is a free data retrieval call binding the contract method 0x63a27111.
//
// Solidity: function getController(string mfileDid) view returns(string)
func (_Filedid *FiledidCaller) GetController(opts *bind.CallOpts, mfileDid string) (string, error) {
	var out []interface{}
	err := _Filedid.contract.Call(opts, &out, "getController", mfileDid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetController is a free data retrieval call binding the contract method 0x63a27111.
//
// Solidity: function getController(string mfileDid) view returns(string)
func (_Filedid *FiledidSession) GetController(mfileDid string) (string, error) {
	return _Filedid.Contract.GetController(&_Filedid.CallOpts, mfileDid)
}

// GetController is a free data retrieval call binding the contract method 0x63a27111.
//
// Solidity: function getController(string mfileDid) view returns(string)
func (_Filedid *FiledidCallerSession) GetController(mfileDid string) (string, error) {
	return _Filedid.Contract.GetController(&_Filedid.CallOpts, mfileDid)
}

// GetEncode is a free data retrieval call binding the contract method 0xf100cfd3.
//
// Solidity: function getEncode(string mfileDid) view returns(string)
func (_Filedid *FiledidCaller) GetEncode(opts *bind.CallOpts, mfileDid string) (string, error) {
	var out []interface{}
	err := _Filedid.contract.Call(opts, &out, "getEncode", mfileDid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetEncode is a free data retrieval call binding the contract method 0xf100cfd3.
//
// Solidity: function getEncode(string mfileDid) view returns(string)
func (_Filedid *FiledidSession) GetEncode(mfileDid string) (string, error) {
	return _Filedid.Contract.GetEncode(&_Filedid.CallOpts, mfileDid)
}

// GetEncode is a free data retrieval call binding the contract method 0xf100cfd3.
//
// Solidity: function getEncode(string mfileDid) view returns(string)
func (_Filedid *FiledidCallerSession) GetEncode(mfileDid string) (string, error) {
	return _Filedid.Contract.GetEncode(&_Filedid.CallOpts, mfileDid)
}

// GetFtype is a free data retrieval call binding the contract method 0xdff5b013.
//
// Solidity: function getFtype(string mfileDid) view returns(uint8)
func (_Filedid *FiledidCaller) GetFtype(opts *bind.CallOpts, mfileDid string) (uint8, error) {
	var out []interface{}
	err := _Filedid.contract.Call(opts, &out, "getFtype", mfileDid)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetFtype is a free data retrieval call binding the contract method 0xdff5b013.
//
// Solidity: function getFtype(string mfileDid) view returns(uint8)
func (_Filedid *FiledidSession) GetFtype(mfileDid string) (uint8, error) {
	return _Filedid.Contract.GetFtype(&_Filedid.CallOpts, mfileDid)
}

// GetFtype is a free data retrieval call binding the contract method 0xdff5b013.
//
// Solidity: function getFtype(string mfileDid) view returns(uint8)
func (_Filedid *FiledidCallerSession) GetFtype(mfileDid string) (uint8, error) {
	return _Filedid.Contract.GetFtype(&_Filedid.CallOpts, mfileDid)
}

// GetKeywords is a free data retrieval call binding the contract method 0x380cc539.
//
// Solidity: function getKeywords(string mfileDid) view returns(string[])
func (_Filedid *FiledidCaller) GetKeywords(opts *bind.CallOpts, mfileDid string) ([]string, error) {
	var out []interface{}
	err := _Filedid.contract.Call(opts, &out, "getKeywords", mfileDid)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetKeywords is a free data retrieval call binding the contract method 0x380cc539.
//
// Solidity: function getKeywords(string mfileDid) view returns(string[])
func (_Filedid *FiledidSession) GetKeywords(mfileDid string) ([]string, error) {
	return _Filedid.Contract.GetKeywords(&_Filedid.CallOpts, mfileDid)
}

// GetKeywords is a free data retrieval call binding the contract method 0x380cc539.
//
// Solidity: function getKeywords(string mfileDid) view returns(string[])
func (_Filedid *FiledidCallerSession) GetKeywords(mfileDid string) ([]string, error) {
	return _Filedid.Contract.GetKeywords(&_Filedid.CallOpts, mfileDid)
}

// GetPrice is a free data retrieval call binding the contract method 0x524f3889.
//
// Solidity: function getPrice(string mfileDid) view returns(uint256)
func (_Filedid *FiledidCaller) GetPrice(opts *bind.CallOpts, mfileDid string) (*big.Int, error) {
	var out []interface{}
	err := _Filedid.contract.Call(opts, &out, "getPrice", mfileDid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPrice is a free data retrieval call binding the contract method 0x524f3889.
//
// Solidity: function getPrice(string mfileDid) view returns(uint256)
func (_Filedid *FiledidSession) GetPrice(mfileDid string) (*big.Int, error) {
	return _Filedid.Contract.GetPrice(&_Filedid.CallOpts, mfileDid)
}

// GetPrice is a free data retrieval call binding the contract method 0x524f3889.
//
// Solidity: function getPrice(string mfileDid) view returns(uint256)
func (_Filedid *FiledidCallerSession) GetPrice(mfileDid string) (*big.Int, error) {
	return _Filedid.Contract.GetPrice(&_Filedid.CallOpts, mfileDid)
}

// Owners is a free data retrieval call binding the contract method 0x022914a7.
//
// Solidity: function owners(address ) view returns(bool)
func (_Filedid *FiledidCaller) Owners(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Filedid.contract.Call(opts, &out, "owners", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Owners is a free data retrieval call binding the contract method 0x022914a7.
//
// Solidity: function owners(address ) view returns(bool)
func (_Filedid *FiledidSession) Owners(arg0 common.Address) (bool, error) {
	return _Filedid.Contract.Owners(&_Filedid.CallOpts, arg0)
}

// Owners is a free data retrieval call binding the contract method 0x022914a7.
//
// Solidity: function owners(address ) view returns(bool)
func (_Filedid *FiledidCallerSession) Owners(arg0 common.Address) (bool, error) {
	return _Filedid.Contract.Owners(&_Filedid.CallOpts, arg0)
}

// Read is a free data retrieval call binding the contract method 0x8c97f99e.
//
// Solidity: function read(string mfileDid, string did) view returns(uint8)
func (_Filedid *FiledidCaller) Read(opts *bind.CallOpts, mfileDid string, did string) (uint8, error) {
	var out []interface{}
	err := _Filedid.contract.Call(opts, &out, "read", mfileDid, did)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Read is a free data retrieval call binding the contract method 0x8c97f99e.
//
// Solidity: function read(string mfileDid, string did) view returns(uint8)
func (_Filedid *FiledidSession) Read(mfileDid string, did string) (uint8, error) {
	return _Filedid.Contract.Read(&_Filedid.CallOpts, mfileDid, did)
}

// Read is a free data retrieval call binding the contract method 0x8c97f99e.
//
// Solidity: function read(string mfileDid, string did) view returns(uint8)
func (_Filedid *FiledidCallerSession) Read(mfileDid string, did string) (uint8, error) {
	return _Filedid.Contract.Read(&_Filedid.CallOpts, mfileDid, did)
}

// Add is a paid mutator transaction binding the contract method 0x4bf1b134.
//
// Solidity: function add(address _a, bool isSet, bytes[5] signs) returns()
func (_Filedid *FiledidTransactor) Add(opts *bind.TransactOpts, _a common.Address, isSet bool, signs [5][]byte) (*types.Transaction, error) {
	return _Filedid.contract.Transact(opts, "add", _a, isSet, signs)
}

// Add is a paid mutator transaction binding the contract method 0x4bf1b134.
//
// Solidity: function add(address _a, bool isSet, bytes[5] signs) returns()
func (_Filedid *FiledidSession) Add(_a common.Address, isSet bool, signs [5][]byte) (*types.Transaction, error) {
	return _Filedid.Contract.Add(&_Filedid.TransactOpts, _a, isSet, signs)
}

// Add is a paid mutator transaction binding the contract method 0x4bf1b134.
//
// Solidity: function add(address _a, bool isSet, bytes[5] signs) returns()
func (_Filedid *FiledidTransactorSession) Add(_a common.Address, isSet bool, signs [5][]byte) (*types.Transaction, error) {
	return _Filedid.Contract.Add(&_Filedid.TransactOpts, _a, isSet, signs)
}

// BuyRead is a paid mutator transaction binding the contract method 0x0069c140.
//
// Solidity: function buyRead(string mfileDid, string memoDid) returns()
func (_Filedid *FiledidTransactor) BuyRead(opts *bind.TransactOpts, mfileDid string, memoDid string) (*types.Transaction, error) {
	return _Filedid.contract.Transact(opts, "buyRead", mfileDid, memoDid)
}

// BuyRead is a paid mutator transaction binding the contract method 0x0069c140.
//
// Solidity: function buyRead(string mfileDid, string memoDid) returns()
func (_Filedid *FiledidSession) BuyRead(mfileDid string, memoDid string) (*types.Transaction, error) {
	return _Filedid.Contract.BuyRead(&_Filedid.TransactOpts, mfileDid, memoDid)
}

// BuyRead is a paid mutator transaction binding the contract method 0x0069c140.
//
// Solidity: function buyRead(string mfileDid, string memoDid) returns()
func (_Filedid *FiledidTransactorSession) BuyRead(mfileDid string, memoDid string) (*types.Transaction, error) {
	return _Filedid.Contract.BuyRead(&_Filedid.TransactOpts, mfileDid, memoDid)
}

// ChangeController is a paid mutator transaction binding the contract method 0x9aad0566.
//
// Solidity: function changeController(string mfileDid, string _controller) returns()
func (_Filedid *FiledidTransactor) ChangeController(opts *bind.TransactOpts, mfileDid string, _controller string) (*types.Transaction, error) {
	return _Filedid.contract.Transact(opts, "changeController", mfileDid, _controller)
}

// ChangeController is a paid mutator transaction binding the contract method 0x9aad0566.
//
// Solidity: function changeController(string mfileDid, string _controller) returns()
func (_Filedid *FiledidSession) ChangeController(mfileDid string, _controller string) (*types.Transaction, error) {
	return _Filedid.Contract.ChangeController(&_Filedid.TransactOpts, mfileDid, _controller)
}

// ChangeController is a paid mutator transaction binding the contract method 0x9aad0566.
//
// Solidity: function changeController(string mfileDid, string _controller) returns()
func (_Filedid *FiledidTransactorSession) ChangeController(mfileDid string, _controller string) (*types.Transaction, error) {
	return _Filedid.Contract.ChangeController(&_Filedid.TransactOpts, mfileDid, _controller)
}

// ChangeFtype is a paid mutator transaction binding the contract method 0x52a0fead.
//
// Solidity: function changeFtype(string mfileDid, uint8 _ftype) returns()
func (_Filedid *FiledidTransactor) ChangeFtype(opts *bind.TransactOpts, mfileDid string, _ftype uint8) (*types.Transaction, error) {
	return _Filedid.contract.Transact(opts, "changeFtype", mfileDid, _ftype)
}

// ChangeFtype is a paid mutator transaction binding the contract method 0x52a0fead.
//
// Solidity: function changeFtype(string mfileDid, uint8 _ftype) returns()
func (_Filedid *FiledidSession) ChangeFtype(mfileDid string, _ftype uint8) (*types.Transaction, error) {
	return _Filedid.Contract.ChangeFtype(&_Filedid.TransactOpts, mfileDid, _ftype)
}

// ChangeFtype is a paid mutator transaction binding the contract method 0x52a0fead.
//
// Solidity: function changeFtype(string mfileDid, uint8 _ftype) returns()
func (_Filedid *FiledidTransactorSession) ChangeFtype(mfileDid string, _ftype uint8) (*types.Transaction, error) {
	return _Filedid.Contract.ChangeFtype(&_Filedid.TransactOpts, mfileDid, _ftype)
}

// ChangeKeywords is a paid mutator transaction binding the contract method 0x64c21f2c.
//
// Solidity: function changeKeywords(string mfileDid, string[] _keywords) returns()
func (_Filedid *FiledidTransactor) ChangeKeywords(opts *bind.TransactOpts, mfileDid string, _keywords []string) (*types.Transaction, error) {
	return _Filedid.contract.Transact(opts, "changeKeywords", mfileDid, _keywords)
}

// ChangeKeywords is a paid mutator transaction binding the contract method 0x64c21f2c.
//
// Solidity: function changeKeywords(string mfileDid, string[] _keywords) returns()
func (_Filedid *FiledidSession) ChangeKeywords(mfileDid string, _keywords []string) (*types.Transaction, error) {
	return _Filedid.Contract.ChangeKeywords(&_Filedid.TransactOpts, mfileDid, _keywords)
}

// ChangeKeywords is a paid mutator transaction binding the contract method 0x64c21f2c.
//
// Solidity: function changeKeywords(string mfileDid, string[] _keywords) returns()
func (_Filedid *FiledidTransactorSession) ChangeKeywords(mfileDid string, _keywords []string) (*types.Transaction, error) {
	return _Filedid.Contract.ChangeKeywords(&_Filedid.TransactOpts, mfileDid, _keywords)
}

// ChangePrice is a paid mutator transaction binding the contract method 0x1fa19596.
//
// Solidity: function changePrice(string mfileDid, uint256 _price) returns()
func (_Filedid *FiledidTransactor) ChangePrice(opts *bind.TransactOpts, mfileDid string, _price *big.Int) (*types.Transaction, error) {
	return _Filedid.contract.Transact(opts, "changePrice", mfileDid, _price)
}

// ChangePrice is a paid mutator transaction binding the contract method 0x1fa19596.
//
// Solidity: function changePrice(string mfileDid, uint256 _price) returns()
func (_Filedid *FiledidSession) ChangePrice(mfileDid string, _price *big.Int) (*types.Transaction, error) {
	return _Filedid.Contract.ChangePrice(&_Filedid.TransactOpts, mfileDid, _price)
}

// ChangePrice is a paid mutator transaction binding the contract method 0x1fa19596.
//
// Solidity: function changePrice(string mfileDid, uint256 _price) returns()
func (_Filedid *FiledidTransactorSession) ChangePrice(mfileDid string, _price *big.Int) (*types.Transaction, error) {
	return _Filedid.Contract.ChangePrice(&_Filedid.TransactOpts, mfileDid, _price)
}

// DeactivateMfileDid is a paid mutator transaction binding the contract method 0x86e9dbc6.
//
// Solidity: function deactivateMfileDid(string mfileDid, bool _deactivate) returns()
func (_Filedid *FiledidTransactor) DeactivateMfileDid(opts *bind.TransactOpts, mfileDid string, _deactivate bool) (*types.Transaction, error) {
	return _Filedid.contract.Transact(opts, "deactivateMfileDid", mfileDid, _deactivate)
}

// DeactivateMfileDid is a paid mutator transaction binding the contract method 0x86e9dbc6.
//
// Solidity: function deactivateMfileDid(string mfileDid, bool _deactivate) returns()
func (_Filedid *FiledidSession) DeactivateMfileDid(mfileDid string, _deactivate bool) (*types.Transaction, error) {
	return _Filedid.Contract.DeactivateMfileDid(&_Filedid.TransactOpts, mfileDid, _deactivate)
}

// DeactivateMfileDid is a paid mutator transaction binding the contract method 0x86e9dbc6.
//
// Solidity: function deactivateMfileDid(string mfileDid, bool _deactivate) returns()
func (_Filedid *FiledidTransactorSession) DeactivateMfileDid(mfileDid string, _deactivate bool) (*types.Transaction, error) {
	return _Filedid.Contract.DeactivateMfileDid(&_Filedid.TransactOpts, mfileDid, _deactivate)
}

// DeactivateRead is a paid mutator transaction binding the contract method 0x37c52d83.
//
// Solidity: function deactivateRead(string mfileDid, string memoDid) returns()
func (_Filedid *FiledidTransactor) DeactivateRead(opts *bind.TransactOpts, mfileDid string, memoDid string) (*types.Transaction, error) {
	return _Filedid.contract.Transact(opts, "deactivateRead", mfileDid, memoDid)
}

// DeactivateRead is a paid mutator transaction binding the contract method 0x37c52d83.
//
// Solidity: function deactivateRead(string mfileDid, string memoDid) returns()
func (_Filedid *FiledidSession) DeactivateRead(mfileDid string, memoDid string) (*types.Transaction, error) {
	return _Filedid.Contract.DeactivateRead(&_Filedid.TransactOpts, mfileDid, memoDid)
}

// DeactivateRead is a paid mutator transaction binding the contract method 0x37c52d83.
//
// Solidity: function deactivateRead(string mfileDid, string memoDid) returns()
func (_Filedid *FiledidTransactorSession) DeactivateRead(mfileDid string, memoDid string) (*types.Transaction, error) {
	return _Filedid.Contract.DeactivateRead(&_Filedid.TransactOpts, mfileDid, memoDid)
}

// GrantRead is a paid mutator transaction binding the contract method 0xa870fcc7.
//
// Solidity: function grantRead(string mfileDid, string memoDid) returns()
func (_Filedid *FiledidTransactor) GrantRead(opts *bind.TransactOpts, mfileDid string, memoDid string) (*types.Transaction, error) {
	return _Filedid.contract.Transact(opts, "grantRead", mfileDid, memoDid)
}

// GrantRead is a paid mutator transaction binding the contract method 0xa870fcc7.
//
// Solidity: function grantRead(string mfileDid, string memoDid) returns()
func (_Filedid *FiledidSession) GrantRead(mfileDid string, memoDid string) (*types.Transaction, error) {
	return _Filedid.Contract.GrantRead(&_Filedid.TransactOpts, mfileDid, memoDid)
}

// GrantRead is a paid mutator transaction binding the contract method 0xa870fcc7.
//
// Solidity: function grantRead(string mfileDid, string memoDid) returns()
func (_Filedid *FiledidTransactorSession) GrantRead(mfileDid string, memoDid string) (*types.Transaction, error) {
	return _Filedid.Contract.GrantRead(&_Filedid.TransactOpts, mfileDid, memoDid)
}

// RegisterMfileDid is a paid mutator transaction binding the contract method 0xca0258dc.
//
// Solidity: function registerMfileDid(string mfileDid, string _encode, uint8 _ftype, string _controller, uint256 _price, string[] _keywords) returns()
func (_Filedid *FiledidTransactor) RegisterMfileDid(opts *bind.TransactOpts, mfileDid string, _encode string, _ftype uint8, _controller string, _price *big.Int, _keywords []string) (*types.Transaction, error) {
	return _Filedid.contract.Transact(opts, "registerMfileDid", mfileDid, _encode, _ftype, _controller, _price, _keywords)
}

// RegisterMfileDid is a paid mutator transaction binding the contract method 0xca0258dc.
//
// Solidity: function registerMfileDid(string mfileDid, string _encode, uint8 _ftype, string _controller, uint256 _price, string[] _keywords) returns()
func (_Filedid *FiledidSession) RegisterMfileDid(mfileDid string, _encode string, _ftype uint8, _controller string, _price *big.Int, _keywords []string) (*types.Transaction, error) {
	return _Filedid.Contract.RegisterMfileDid(&_Filedid.TransactOpts, mfileDid, _encode, _ftype, _controller, _price, _keywords)
}

// RegisterMfileDid is a paid mutator transaction binding the contract method 0xca0258dc.
//
// Solidity: function registerMfileDid(string mfileDid, string _encode, uint8 _ftype, string _controller, uint256 _price, string[] _keywords) returns()
func (_Filedid *FiledidTransactorSession) RegisterMfileDid(mfileDid string, _encode string, _ftype uint8, _controller string, _price *big.Int, _keywords []string) (*types.Transaction, error) {
	return _Filedid.Contract.RegisterMfileDid(&_Filedid.TransactOpts, mfileDid, _encode, _ftype, _controller, _price, _keywords)
}

// FiledidAddOwnerIterator is returned from FilterAddOwner and is used to iterate over the raw logs and unpacked data for AddOwner events raised by the Filedid contract.
type FiledidAddOwnerIterator struct {
	Event *FiledidAddOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiledidAddOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiledidAddOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiledidAddOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiledidAddOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiledidAddOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiledidAddOwner represents a AddOwner event raised by the Filedid contract.
type FiledidAddOwner struct {
	From  common.Address
	IsSet bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddOwner is a free log retrieval operation binding the contract event 0x938b2a24c98e4e542127ffa74a91e48942c2bddccae3b6d75f82bfda7bbc0807.
//
// Solidity: event AddOwner(address from, bool isSet)
func (_Filedid *FiledidFilterer) FilterAddOwner(opts *bind.FilterOpts) (*FiledidAddOwnerIterator, error) {

	logs, sub, err := _Filedid.contract.FilterLogs(opts, "AddOwner")
	if err != nil {
		return nil, err
	}
	return &FiledidAddOwnerIterator{contract: _Filedid.contract, event: "AddOwner", logs: logs, sub: sub}, nil
}

// WatchAddOwner is a free log subscription operation binding the contract event 0x938b2a24c98e4e542127ffa74a91e48942c2bddccae3b6d75f82bfda7bbc0807.
//
// Solidity: event AddOwner(address from, bool isSet)
func (_Filedid *FiledidFilterer) WatchAddOwner(opts *bind.WatchOpts, sink chan<- *FiledidAddOwner) (event.Subscription, error) {

	logs, sub, err := _Filedid.contract.WatchLogs(opts, "AddOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiledidAddOwner)
				if err := _Filedid.contract.UnpackLog(event, "AddOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddOwner is a log parse operation binding the contract event 0x938b2a24c98e4e542127ffa74a91e48942c2bddccae3b6d75f82bfda7bbc0807.
//
// Solidity: event AddOwner(address from, bool isSet)
func (_Filedid *FiledidFilterer) ParseAddOwner(log types.Log) (*FiledidAddOwner, error) {
	event := new(FiledidAddOwner)
	if err := _Filedid.contract.UnpackLog(event, "AddOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiledidBuyReadIterator is returned from FilterBuyRead and is used to iterate over the raw logs and unpacked data for BuyRead events raised by the Filedid contract.
type FiledidBuyReadIterator struct {
	Event *FiledidBuyRead // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiledidBuyReadIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiledidBuyRead)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiledidBuyRead)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiledidBuyReadIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiledidBuyReadIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiledidBuyRead represents a BuyRead event raised by the Filedid contract.
type FiledidBuyRead struct {
	MfileDid common.Hash
	MemoDid  string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBuyRead is a free log retrieval operation binding the contract event 0x9a23ee694031b7714b282fb4f89b349db581b6c5fb20fb299897b2dbb5b6510a.
//
// Solidity: event BuyRead(string indexed mfileDid, string memoDid)
func (_Filedid *FiledidFilterer) FilterBuyRead(opts *bind.FilterOpts, mfileDid []string) (*FiledidBuyReadIterator, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.FilterLogs(opts, "BuyRead", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return &FiledidBuyReadIterator{contract: _Filedid.contract, event: "BuyRead", logs: logs, sub: sub}, nil
}

// WatchBuyRead is a free log subscription operation binding the contract event 0x9a23ee694031b7714b282fb4f89b349db581b6c5fb20fb299897b2dbb5b6510a.
//
// Solidity: event BuyRead(string indexed mfileDid, string memoDid)
func (_Filedid *FiledidFilterer) WatchBuyRead(opts *bind.WatchOpts, sink chan<- *FiledidBuyRead, mfileDid []string) (event.Subscription, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.WatchLogs(opts, "BuyRead", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiledidBuyRead)
				if err := _Filedid.contract.UnpackLog(event, "BuyRead", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBuyRead is a log parse operation binding the contract event 0x9a23ee694031b7714b282fb4f89b349db581b6c5fb20fb299897b2dbb5b6510a.
//
// Solidity: event BuyRead(string indexed mfileDid, string memoDid)
func (_Filedid *FiledidFilterer) ParseBuyRead(log types.Log) (*FiledidBuyRead, error) {
	event := new(FiledidBuyRead)
	if err := _Filedid.contract.UnpackLog(event, "BuyRead", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiledidChangeControllerIterator is returned from FilterChangeController and is used to iterate over the raw logs and unpacked data for ChangeController events raised by the Filedid contract.
type FiledidChangeControllerIterator struct {
	Event *FiledidChangeController // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiledidChangeControllerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiledidChangeController)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiledidChangeController)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiledidChangeControllerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiledidChangeControllerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiledidChangeController represents a ChangeController event raised by the Filedid contract.
type FiledidChangeController struct {
	MfileDid   common.Hash
	Controller string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterChangeController is a free log retrieval operation binding the contract event 0xad2c5e83d2fbe2975f5ba70ab5c8c351ef2da897e41ce843a2eb6de9ffbf59ee.
//
// Solidity: event ChangeController(string indexed mfileDid, string controller)
func (_Filedid *FiledidFilterer) FilterChangeController(opts *bind.FilterOpts, mfileDid []string) (*FiledidChangeControllerIterator, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.FilterLogs(opts, "ChangeController", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return &FiledidChangeControllerIterator{contract: _Filedid.contract, event: "ChangeController", logs: logs, sub: sub}, nil
}

// WatchChangeController is a free log subscription operation binding the contract event 0xad2c5e83d2fbe2975f5ba70ab5c8c351ef2da897e41ce843a2eb6de9ffbf59ee.
//
// Solidity: event ChangeController(string indexed mfileDid, string controller)
func (_Filedid *FiledidFilterer) WatchChangeController(opts *bind.WatchOpts, sink chan<- *FiledidChangeController, mfileDid []string) (event.Subscription, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.WatchLogs(opts, "ChangeController", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiledidChangeController)
				if err := _Filedid.contract.UnpackLog(event, "ChangeController", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangeController is a log parse operation binding the contract event 0xad2c5e83d2fbe2975f5ba70ab5c8c351ef2da897e41ce843a2eb6de9ffbf59ee.
//
// Solidity: event ChangeController(string indexed mfileDid, string controller)
func (_Filedid *FiledidFilterer) ParseChangeController(log types.Log) (*FiledidChangeController, error) {
	event := new(FiledidChangeController)
	if err := _Filedid.contract.UnpackLog(event, "ChangeController", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiledidChangeFtypeIterator is returned from FilterChangeFtype and is used to iterate over the raw logs and unpacked data for ChangeFtype events raised by the Filedid contract.
type FiledidChangeFtypeIterator struct {
	Event *FiledidChangeFtype // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiledidChangeFtypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiledidChangeFtype)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiledidChangeFtype)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiledidChangeFtypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiledidChangeFtypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiledidChangeFtype represents a ChangeFtype event raised by the Filedid contract.
type FiledidChangeFtype struct {
	MfileDid common.Hash
	Ftype    uint8
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterChangeFtype is a free log retrieval operation binding the contract event 0x935721402a5ae34f86d9500f87d6acfbef247c62cc5c845f49e7ec94a0dd4896.
//
// Solidity: event ChangeFtype(string indexed mfileDid, uint8 ftype)
func (_Filedid *FiledidFilterer) FilterChangeFtype(opts *bind.FilterOpts, mfileDid []string) (*FiledidChangeFtypeIterator, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.FilterLogs(opts, "ChangeFtype", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return &FiledidChangeFtypeIterator{contract: _Filedid.contract, event: "ChangeFtype", logs: logs, sub: sub}, nil
}

// WatchChangeFtype is a free log subscription operation binding the contract event 0x935721402a5ae34f86d9500f87d6acfbef247c62cc5c845f49e7ec94a0dd4896.
//
// Solidity: event ChangeFtype(string indexed mfileDid, uint8 ftype)
func (_Filedid *FiledidFilterer) WatchChangeFtype(opts *bind.WatchOpts, sink chan<- *FiledidChangeFtype, mfileDid []string) (event.Subscription, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.WatchLogs(opts, "ChangeFtype", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiledidChangeFtype)
				if err := _Filedid.contract.UnpackLog(event, "ChangeFtype", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangeFtype is a log parse operation binding the contract event 0x935721402a5ae34f86d9500f87d6acfbef247c62cc5c845f49e7ec94a0dd4896.
//
// Solidity: event ChangeFtype(string indexed mfileDid, uint8 ftype)
func (_Filedid *FiledidFilterer) ParseChangeFtype(log types.Log) (*FiledidChangeFtype, error) {
	event := new(FiledidChangeFtype)
	if err := _Filedid.contract.UnpackLog(event, "ChangeFtype", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiledidChangeKeywordsIterator is returned from FilterChangeKeywords and is used to iterate over the raw logs and unpacked data for ChangeKeywords events raised by the Filedid contract.
type FiledidChangeKeywordsIterator struct {
	Event *FiledidChangeKeywords // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiledidChangeKeywordsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiledidChangeKeywords)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiledidChangeKeywords)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiledidChangeKeywordsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiledidChangeKeywordsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiledidChangeKeywords represents a ChangeKeywords event raised by the Filedid contract.
type FiledidChangeKeywords struct {
	MfileDid common.Hash
	Keywords []string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterChangeKeywords is a free log retrieval operation binding the contract event 0x0d0ecbde8ff7f0cbfa8a5aba6209011f194a2ab60ceb48e047f704427ebbed2e.
//
// Solidity: event ChangeKeywords(string indexed mfileDid, string[] keywords)
func (_Filedid *FiledidFilterer) FilterChangeKeywords(opts *bind.FilterOpts, mfileDid []string) (*FiledidChangeKeywordsIterator, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.FilterLogs(opts, "ChangeKeywords", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return &FiledidChangeKeywordsIterator{contract: _Filedid.contract, event: "ChangeKeywords", logs: logs, sub: sub}, nil
}

// WatchChangeKeywords is a free log subscription operation binding the contract event 0x0d0ecbde8ff7f0cbfa8a5aba6209011f194a2ab60ceb48e047f704427ebbed2e.
//
// Solidity: event ChangeKeywords(string indexed mfileDid, string[] keywords)
func (_Filedid *FiledidFilterer) WatchChangeKeywords(opts *bind.WatchOpts, sink chan<- *FiledidChangeKeywords, mfileDid []string) (event.Subscription, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.WatchLogs(opts, "ChangeKeywords", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiledidChangeKeywords)
				if err := _Filedid.contract.UnpackLog(event, "ChangeKeywords", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangeKeywords is a log parse operation binding the contract event 0x0d0ecbde8ff7f0cbfa8a5aba6209011f194a2ab60ceb48e047f704427ebbed2e.
//
// Solidity: event ChangeKeywords(string indexed mfileDid, string[] keywords)
func (_Filedid *FiledidFilterer) ParseChangeKeywords(log types.Log) (*FiledidChangeKeywords, error) {
	event := new(FiledidChangeKeywords)
	if err := _Filedid.contract.UnpackLog(event, "ChangeKeywords", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiledidChangePriceIterator is returned from FilterChangePrice and is used to iterate over the raw logs and unpacked data for ChangePrice events raised by the Filedid contract.
type FiledidChangePriceIterator struct {
	Event *FiledidChangePrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiledidChangePriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiledidChangePrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiledidChangePrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiledidChangePriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiledidChangePriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiledidChangePrice represents a ChangePrice event raised by the Filedid contract.
type FiledidChangePrice struct {
	MfileDid common.Hash
	Price    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterChangePrice is a free log retrieval operation binding the contract event 0x0868ddc93d8bff1d2b8931574f1250319ab20dc6cdf2a7f86d5eee192ea1c986.
//
// Solidity: event ChangePrice(string indexed mfileDid, uint256 price)
func (_Filedid *FiledidFilterer) FilterChangePrice(opts *bind.FilterOpts, mfileDid []string) (*FiledidChangePriceIterator, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.FilterLogs(opts, "ChangePrice", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return &FiledidChangePriceIterator{contract: _Filedid.contract, event: "ChangePrice", logs: logs, sub: sub}, nil
}

// WatchChangePrice is a free log subscription operation binding the contract event 0x0868ddc93d8bff1d2b8931574f1250319ab20dc6cdf2a7f86d5eee192ea1c986.
//
// Solidity: event ChangePrice(string indexed mfileDid, uint256 price)
func (_Filedid *FiledidFilterer) WatchChangePrice(opts *bind.WatchOpts, sink chan<- *FiledidChangePrice, mfileDid []string) (event.Subscription, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.WatchLogs(opts, "ChangePrice", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiledidChangePrice)
				if err := _Filedid.contract.UnpackLog(event, "ChangePrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangePrice is a log parse operation binding the contract event 0x0868ddc93d8bff1d2b8931574f1250319ab20dc6cdf2a7f86d5eee192ea1c986.
//
// Solidity: event ChangePrice(string indexed mfileDid, uint256 price)
func (_Filedid *FiledidFilterer) ParseChangePrice(log types.Log) (*FiledidChangePrice, error) {
	event := new(FiledidChangePrice)
	if err := _Filedid.contract.UnpackLog(event, "ChangePrice", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiledidDeactivateMfileDidIterator is returned from FilterDeactivateMfileDid and is used to iterate over the raw logs and unpacked data for DeactivateMfileDid events raised by the Filedid contract.
type FiledidDeactivateMfileDidIterator struct {
	Event *FiledidDeactivateMfileDid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiledidDeactivateMfileDidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiledidDeactivateMfileDid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiledidDeactivateMfileDid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiledidDeactivateMfileDidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiledidDeactivateMfileDidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiledidDeactivateMfileDid represents a DeactivateMfileDid event raised by the Filedid contract.
type FiledidDeactivateMfileDid struct {
	MfileDid   string
	Deactivate bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDeactivateMfileDid is a free log retrieval operation binding the contract event 0x5e17ae7a2d292f907502879bb1abf12db289923734c91a05b5d0651531aebf2a.
//
// Solidity: event DeactivateMfileDid(string mfileDid, bool deactivate)
func (_Filedid *FiledidFilterer) FilterDeactivateMfileDid(opts *bind.FilterOpts) (*FiledidDeactivateMfileDidIterator, error) {

	logs, sub, err := _Filedid.contract.FilterLogs(opts, "DeactivateMfileDid")
	if err != nil {
		return nil, err
	}
	return &FiledidDeactivateMfileDidIterator{contract: _Filedid.contract, event: "DeactivateMfileDid", logs: logs, sub: sub}, nil
}

// WatchDeactivateMfileDid is a free log subscription operation binding the contract event 0x5e17ae7a2d292f907502879bb1abf12db289923734c91a05b5d0651531aebf2a.
//
// Solidity: event DeactivateMfileDid(string mfileDid, bool deactivate)
func (_Filedid *FiledidFilterer) WatchDeactivateMfileDid(opts *bind.WatchOpts, sink chan<- *FiledidDeactivateMfileDid) (event.Subscription, error) {

	logs, sub, err := _Filedid.contract.WatchLogs(opts, "DeactivateMfileDid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiledidDeactivateMfileDid)
				if err := _Filedid.contract.UnpackLog(event, "DeactivateMfileDid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeactivateMfileDid is a log parse operation binding the contract event 0x5e17ae7a2d292f907502879bb1abf12db289923734c91a05b5d0651531aebf2a.
//
// Solidity: event DeactivateMfileDid(string mfileDid, bool deactivate)
func (_Filedid *FiledidFilterer) ParseDeactivateMfileDid(log types.Log) (*FiledidDeactivateMfileDid, error) {
	event := new(FiledidDeactivateMfileDid)
	if err := _Filedid.contract.UnpackLog(event, "DeactivateMfileDid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiledidDeactivateReadIterator is returned from FilterDeactivateRead and is used to iterate over the raw logs and unpacked data for DeactivateRead events raised by the Filedid contract.
type FiledidDeactivateReadIterator struct {
	Event *FiledidDeactivateRead // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiledidDeactivateReadIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiledidDeactivateRead)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiledidDeactivateRead)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiledidDeactivateReadIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiledidDeactivateReadIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiledidDeactivateRead represents a DeactivateRead event raised by the Filedid contract.
type FiledidDeactivateRead struct {
	MfileDid common.Hash
	MemoDid  string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDeactivateRead is a free log retrieval operation binding the contract event 0x9d679cd38c09c06f29e83ac51c57df2602453a9336575359346cfab8a8f32606.
//
// Solidity: event DeactivateRead(string indexed mfileDid, string memoDid)
func (_Filedid *FiledidFilterer) FilterDeactivateRead(opts *bind.FilterOpts, mfileDid []string) (*FiledidDeactivateReadIterator, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.FilterLogs(opts, "DeactivateRead", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return &FiledidDeactivateReadIterator{contract: _Filedid.contract, event: "DeactivateRead", logs: logs, sub: sub}, nil
}

// WatchDeactivateRead is a free log subscription operation binding the contract event 0x9d679cd38c09c06f29e83ac51c57df2602453a9336575359346cfab8a8f32606.
//
// Solidity: event DeactivateRead(string indexed mfileDid, string memoDid)
func (_Filedid *FiledidFilterer) WatchDeactivateRead(opts *bind.WatchOpts, sink chan<- *FiledidDeactivateRead, mfileDid []string) (event.Subscription, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.WatchLogs(opts, "DeactivateRead", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiledidDeactivateRead)
				if err := _Filedid.contract.UnpackLog(event, "DeactivateRead", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeactivateRead is a log parse operation binding the contract event 0x9d679cd38c09c06f29e83ac51c57df2602453a9336575359346cfab8a8f32606.
//
// Solidity: event DeactivateRead(string indexed mfileDid, string memoDid)
func (_Filedid *FiledidFilterer) ParseDeactivateRead(log types.Log) (*FiledidDeactivateRead, error) {
	event := new(FiledidDeactivateRead)
	if err := _Filedid.contract.UnpackLog(event, "DeactivateRead", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiledidGrantReadIterator is returned from FilterGrantRead and is used to iterate over the raw logs and unpacked data for GrantRead events raised by the Filedid contract.
type FiledidGrantReadIterator struct {
	Event *FiledidGrantRead // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiledidGrantReadIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiledidGrantRead)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiledidGrantRead)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiledidGrantReadIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiledidGrantReadIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiledidGrantRead represents a GrantRead event raised by the Filedid contract.
type FiledidGrantRead struct {
	MfileDid common.Hash
	MemoDid  string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterGrantRead is a free log retrieval operation binding the contract event 0x94b2915a0e10afcab72fdc47f046e2d9f8c45380746ef36ed2f10afaff5390be.
//
// Solidity: event GrantRead(string indexed mfileDid, string memoDid)
func (_Filedid *FiledidFilterer) FilterGrantRead(opts *bind.FilterOpts, mfileDid []string) (*FiledidGrantReadIterator, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.FilterLogs(opts, "GrantRead", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return &FiledidGrantReadIterator{contract: _Filedid.contract, event: "GrantRead", logs: logs, sub: sub}, nil
}

// WatchGrantRead is a free log subscription operation binding the contract event 0x94b2915a0e10afcab72fdc47f046e2d9f8c45380746ef36ed2f10afaff5390be.
//
// Solidity: event GrantRead(string indexed mfileDid, string memoDid)
func (_Filedid *FiledidFilterer) WatchGrantRead(opts *bind.WatchOpts, sink chan<- *FiledidGrantRead, mfileDid []string) (event.Subscription, error) {

	var mfileDidRule []interface{}
	for _, mfileDidItem := range mfileDid {
		mfileDidRule = append(mfileDidRule, mfileDidItem)
	}

	logs, sub, err := _Filedid.contract.WatchLogs(opts, "GrantRead", mfileDidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiledidGrantRead)
				if err := _Filedid.contract.UnpackLog(event, "GrantRead", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGrantRead is a log parse operation binding the contract event 0x94b2915a0e10afcab72fdc47f046e2d9f8c45380746ef36ed2f10afaff5390be.
//
// Solidity: event GrantRead(string indexed mfileDid, string memoDid)
func (_Filedid *FiledidFilterer) ParseGrantRead(log types.Log) (*FiledidGrantRead, error) {
	event := new(FiledidGrantRead)
	if err := _Filedid.contract.UnpackLog(event, "GrantRead", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiledidRegisterMfileDidIterator is returned from FilterRegisterMfileDid and is used to iterate over the raw logs and unpacked data for RegisterMfileDid events raised by the Filedid contract.
type FiledidRegisterMfileDidIterator struct {
	Event *FiledidRegisterMfileDid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiledidRegisterMfileDidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiledidRegisterMfileDid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiledidRegisterMfileDid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiledidRegisterMfileDidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiledidRegisterMfileDidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiledidRegisterMfileDid represents a RegisterMfileDid event raised by the Filedid contract.
type FiledidRegisterMfileDid struct {
	MfileDid string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRegisterMfileDid is a free log retrieval operation binding the contract event 0x09f50a6181226540ba96339e43e56ab9004a370db287d9dd7db64891edc494fe.
//
// Solidity: event RegisterMfileDid(string mfileDid)
func (_Filedid *FiledidFilterer) FilterRegisterMfileDid(opts *bind.FilterOpts) (*FiledidRegisterMfileDidIterator, error) {

	logs, sub, err := _Filedid.contract.FilterLogs(opts, "RegisterMfileDid")
	if err != nil {
		return nil, err
	}
	return &FiledidRegisterMfileDidIterator{contract: _Filedid.contract, event: "RegisterMfileDid", logs: logs, sub: sub}, nil
}

// WatchRegisterMfileDid is a free log subscription operation binding the contract event 0x09f50a6181226540ba96339e43e56ab9004a370db287d9dd7db64891edc494fe.
//
// Solidity: event RegisterMfileDid(string mfileDid)
func (_Filedid *FiledidFilterer) WatchRegisterMfileDid(opts *bind.WatchOpts, sink chan<- *FiledidRegisterMfileDid) (event.Subscription, error) {

	logs, sub, err := _Filedid.contract.WatchLogs(opts, "RegisterMfileDid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiledidRegisterMfileDid)
				if err := _Filedid.contract.UnpackLog(event, "RegisterMfileDid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisterMfileDid is a log parse operation binding the contract event 0x09f50a6181226540ba96339e43e56ab9004a370db287d9dd7db64891edc494fe.
//
// Solidity: event RegisterMfileDid(string mfileDid)
func (_Filedid *FiledidFilterer) ParseRegisterMfileDid(log types.Log) (*FiledidRegisterMfileDid, error) {
	event := new(FiledidRegisterMfileDid)
	if err := _Filedid.contract.UnpackLog(event, "RegisterMfileDid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
