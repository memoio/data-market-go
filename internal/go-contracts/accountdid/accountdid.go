// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accountdid

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IAccountDidPublicKey is an auto generated low-level Go binding around an user-defined struct.
type IAccountDidPublicKey struct {
	MethodType  string
	Controller  string
	PubKeyData  []byte
	Deactivated bool
	PubKeyPoint [2]*big.Int
}

// AccountdidMetaData contains all meta data concerning the Accountdid contract.
var AccountdidMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"AddAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"AddAuth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"AddDelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recovery\",\"type\":\"string\"}],\"name\":\"AddRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AddVeri\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"CreateDID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"DeactivateDID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DeactivateVeri\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"RemoveAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"RemoveAuth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"RemoveDelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recovery\",\"type\":\"string\"}],\"name\":\"RemoveRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UpdateVeri\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"bytes[5]\",\"name\":\"signs\",\"type\":\"bytes[5]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"addAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"addAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"addDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"addRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"methodType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"controller\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"pubKeyData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"deactivated\",\"type\":\"bool\"},{\"internalType\":\"uint256[2]\",\"name\":\"pubKeyPoint\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIAccountDid.PublicKey\",\"name\":\"pubKey\",\"type\":\"tuple\"}],\"name\":\"addVeri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_methodType\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_pubKeyData\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pubKeyPoint\",\"type\":\"uint256[2]\"}],\"name\":\"createDID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"deactivated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"deactivate\",\"type\":\"bool\"}],\"name\":\"deactivateDID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deactivate\",\"type\":\"bool\"}],\"name\":\"deactivateVeri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"getMasterKeyAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"getMasterVerification\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"methodType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"controller\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"pubKeyData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"deactivated\",\"type\":\"bool\"},{\"internalType\":\"uint256[2]\",\"name\":\"pubKeyPoint\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIAccountDid.PublicKey\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVeri\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"methodType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"controller\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"pubKeyData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"deactivated\",\"type\":\"bool\"},{\"internalType\":\"uint256[2]\",\"name\":\"pubKeyPoint\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIAccountDid.PublicKey\",\"name\":\"pubKey\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"getVeriLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"inAssertion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"inAuth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"inDelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"inRecovery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"isDeactivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"removeAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"removeAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"removeDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"removeRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"methodType\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"pubKeyData\",\"type\":\"bytes\"}],\"name\":\"updateVeri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004018380380620040188339818101604052810190620000379190620000eb565b8080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200011d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b38262000086565b9050919050565b620000c581620000a6565b8114620000d157600080fd5b50565b600081519050620000e581620000ba565b92915050565b60006020828403121562000104576200010362000081565b5b60006200011484828501620000d4565b91505092915050565b613eeb806200012d6000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c8063b4334b0d116100de578063e006423611610097578063f30d506311610071578063f30d5063146104b1578063f7181a1a146104cd578063f81568bd146104fd578063f888a7de146105195761018d565b8063e006423614610449578063e9454a1414610479578063f140545b146104955761018d565b8063b4334b0d14610377578063c1613ed4146103a7578063c7469dc1146103c3578063c7948e4b146103df578063c9be35991461040f578063de9375f21461042b5761018d565b806351ac50221161014b5780637c01d259116101255780637c01d259146102cb5780637f0a84cc146102fb5780639045322c1461032b578063a174a4cc146103475761018d565b806351ac50221461027757806358ba1928146102935780637904ee08146102af5761018d565b8062d13cf114610192578063022914a7146101ae57806304f6748c146101de5780630e3726761461020f5780634bf1b1341461023f57806350031b761461025b575b600080fd5b6101ac60048036038101906101a791906128c1565b610549565b005b6101c860048036038101906101c39190612997565b6106ea565b6040516101d591906129df565b60405180910390f35b6101f860048036038101906101f391906129fa565b61070a565b604051610206929190612a52565b60405180910390f35b610229600480360381019061022491906129fa565b610771565b6040516102369190612a7b565b60405180910390f35b61025960048036038101906102549190612c37565b6107bc565b005b610275600480360381019061027091906128c1565b610959565b005b610291600480360381019061028c9190612cdc565b610afa565b005b6102ad60048036038101906102a89190612d4b565b610d14565b005b6102c960048036038101906102c491906128c1565b610f9a565b005b6102e560048036038101906102e091906128c1565b61113b565b6040516102f291906129df565b60405180910390f35b610315600480360381019061031091906128c1565b611190565b6040516103229190612e15565b60405180910390f35b61034560048036038101906103409190612e30565b6111d8565b005b610361600480360381019061035c91906129fa565b611368565b60405161036e91906130cd565b60405180910390f35b610391600480360381019061038c91906128c1565b6115da565b60405161039e91906129df565b60405180910390f35b6103c160048036038101906103bc91906128c1565b61162f565b005b6103dd60048036038101906103d8919061328a565b6117d0565b005b6103f960048036038101906103f491906129fa565b611a66565b6040516104069190612e15565b60405180910390f35b61042960048036038101906104249190613302565b611a94565b005b610433611b93565b6040516104409190612a7b565b60405180910390f35b610463600480360381019061045e91906129fa565b611bb9565b60405161047091906129df565b60405180910390f35b610493600480360381019061048e91906128c1565b611bf1565b005b6104af60048036038101906104aa91906128c1565b611d92565b005b6104cb60048036038101906104c6919061335e565b611f20565b005b6104e760048036038101906104e29190613419565b6121e3565b6040516104f491906130cd565b60405180910390f35b610517600480360381019061051291906128c1565b6124bb565b005b610533600480360381019061052e91906128c1565b61265c565b60405161054091906129df565b60405180910390f35b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cb906134d2565b60405180910390fd5b6002826040516105e4919061352e565b908152602001604051809103902060050160149054906101000a900460ff1615610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a90613591565b60405180910390fd5b6001600283604051610655919061352e565b908152602001604051809103902060040182604051610674919061352e565b908152602001604051809103902060006101000a81548160ff021916908315150217905550816040516106a7919061352e565b60405180910390207f3cd3cc4e2cfc49d39689a2f57840dd97e5b351162eacf217a43e35297a7e91f9826040516106de91906135ea565b60405180910390a25050565b60006020528060005260406000206000915054906101000a900460ff1681565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090508060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160149054906101000a900460ff16905082565b6000600282604051610783919061352e565b908152602001604051809103902060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000833b905060008103610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc90613658565b60405180910390fd5b600030858560405160200161081c93929190613754565b604051602081830303815290604052805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a96bba9d82856040518363ffffffff1660e01b815260040161089192919061386b565b600060405180830381600087803b1580156108ab57600080fd5b505af11580156108bf573d6000803e3d6000fd5b50505050836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f938b2a24c98e4e542127ffa74a91e48942c2bddccae3b6d75f82bfda7bbc0807858560405161094a929190612a52565b60405180910390a15050505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109db906134d2565b60405180910390fd5b6002826040516109f4919061352e565b908152602001604051809103902060050160149054906101000a900460ff1615610a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4a90613591565b60405180910390fd5b6001600283604051610a65919061352e565b908152602001604051809103902060020182604051610a84919061352e565b908152602001604051809103902060006101000a81548160ff02191690831515021790555081604051610ab7919061352e565b60405180910390207f3dc8a6dcefb090c20c6f37f01dabde1a17b9c6dd4969ce7e78206888764c249082604051610aee91906135ea565b60405180910390a25050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7c906134d2565b60405180910390fd5b600283604051610b95919061352e565b908152602001604051809103902060050160149054906101000a900460ff1615610bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610beb90613591565b60405180910390fd5b600082118015610c275750600283604051610c0f919061352e565b90815260200160405180910390206000018054905082105b610c66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5d906138e7565b60405180910390fd5b80600284604051610c77919061352e565b90815260200160405180910390206000018381548110610c9a57610c99613907565b5b906000526020600020906006020160030160006101000a81548160ff02191690831515021790555082604051610cd0919061352e565b60405180910390207f671fd31386743fa44ce13617f8a8c357387671e6b9886278e67bbd2136d50ec683604051610d079190612e15565b60405180910390a2505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d96906134d2565b60405180910390fd5b600083118015610dd25750600284604051610dba919061352e565b90815260200160405180910390206000018054905083105b610e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e08906138e7565b60405180910390fd5b600284604051610e21919061352e565b90815260200160405180910390206000018381548110610e4457610e43613907565b5b906000526020600020906006020160030160009054906101000a900460ff1615610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a90613982565b60405180910390fd5b81600285604051610eb4919061352e565b90815260200160405180910390206000018481548110610ed757610ed6613907565b5b90600052602060002090600602016000019081610ef49190613bae565b5080600285604051610f06919061352e565b90815260200160405180910390206000018481548110610f2957610f28613907565b5b90600052602060002090600602016002019081610f469190613cdb565b5083604051610f55919061352e565b60405180910390207f0b5c217a46ac23c52cf9217e0c43790834fe751d2e98488c23e5b79fe9c82efa84604051610f8c9190612e15565b60405180910390a250505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611025576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101c906134d2565b60405180910390fd5b600282604051611035919061352e565b908152602001604051809103902060050160149054906101000a900460ff1615611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b90613591565b60405180910390fd5b60006002836040516110a6919061352e565b9081526020016040518091039020600201826040516110c5919061352e565b908152602001604051809103902060006101000a81548160ff021916908315150217905550816040516110f8919061352e565b60405180910390207f3e0a1fa337a30b1d302db25bc619c00f50e32e1ac195055458870ecf6a7662f48260405161112f91906135ea565b60405180910390a25050565b600060028360405161114d919061352e565b90815260200160405180910390206002018260405161116c919061352e565b908152602001604051809103902060009054906101000a900460ff16905092915050565b60006002836040516111a2919061352e565b9081526020016040518091039020600301826040516111c1919061352e565b908152602001604051809103902054905092915050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125a906134d2565b60405180910390fd5b600283604051611273919061352e565b908152602001604051809103902060050160149054906101000a900460ff16156112d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c990613591565b60405180910390fd5b806002846040516112e3919061352e565b908152602001604051809103902060030183604051611302919061352e565b90815260200160405180910390208190555082604051611322919061352e565b60405180910390207fd8b844a934c50876df4c445f08f47cc0ec2dc234e128be3af72b2f86e89da060838360405161135b929190613dad565b60405180910390a2505050565b6113706126b1565b600282604051611380919061352e565b90815260200160405180910390206000016000815481106113a4576113a3613907565b5b90600052602060002090600602016040518060a00160405290816000820180546113cd906139d1565b80601f01602080910402602001604051908101604052809291908181526020018280546113f9906139d1565b80156114465780601f1061141b57610100808354040283529160200191611446565b820191906000526020600020905b81548152906001019060200180831161142957829003601f168201915b5050505050815260200160018201805461145f906139d1565b80601f016020809104026020016040519081016040528092919081815260200182805461148b906139d1565b80156114d85780601f106114ad576101008083540402835291602001916114d8565b820191906000526020600020905b8154815290600101906020018083116114bb57829003601f168201915b505050505081526020016002820180546114f1906139d1565b80601f016020809104026020016040519081016040528092919081815260200182805461151d906139d1565b801561156a5780601f1061153f5761010080835404028352916020019161156a565b820191906000526020600020905b81548152906001019060200180831161154d57829003601f168201915b505050505081526020016003820160009054906101000a900460ff16151515158152602001600482016002806020026040519081016040528092919082600280156115ca576020028201915b8154815260200190600101908083116115b6575b5050505050815250509050919050565b60006002836040516115ec919061352e565b90815260200160405180910390206004018260405161160b919061352e565b908152602001604051809103902060009054906101000a900460ff16905092915050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166116ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b1906134d2565b60405180910390fd5b6002826040516116ca919061352e565b908152602001604051809103902060050160149054906101000a900460ff1615611729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172090613591565b60405180910390fd5b600060028360405161173b919061352e565b90815260200160405180910390206004018260405161175a919061352e565b908152602001604051809103902060006101000a81548160ff0219169083151502179055508160405161178d919061352e565b60405180910390207f40de7c6accd11e8883b27f5c2047d04862324bb82cc21180097aee971255fa40826040516117c491906135ea565b60405180910390a25050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661185b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611852906134d2565b60405180910390fd5b60028260405161186b919061352e565b908152602001604051809103902060050160149054906101000a900460ff16156118ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c190613591565b60405180910390fd5b6000816020015151141580156118e557506000816040015151115b611924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191b90613e29565b60405180910390fd5b6000600283604051611936919061352e565b908152602001604051809103902060000180549050905060028360405161195d919061352e565b908152602001604051809103902060000182908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000190816119ad9190613bae565b5060208201518160010190816119c39190613bae565b5060408201518160020190816119d99190613cdb565b5060608201518160030160006101000a81548160ff021916908315150217905550608082015181600401906002611a119291906126e8565b50505082604051611a22919061352e565b60405180910390207f7d14d7731faefa682df55a71db25727d5a1120c74cd2cd0fb4e2fe58e3adc8dd82604051611a599190612e15565b60405180910390a2505050565b6000600282604051611a78919061352e565b9081526020016040518091039020600001805490509050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b16906134d2565b60405180910390fd5b80600283604051611b30919061352e565b908152602001604051809103902060050160146101000a81548160ff0219169083151502179055507f2057c1bebefc71cf1116bc35105e72c4ec2baa1014a67f924edda51eee4565e882604051611b8791906135ea565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600282604051611bcb919061352e565b908152602001604051809103902060050160149054906101000a900460ff169050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c73906134d2565b60405180910390fd5b600282604051611c8c919061352e565b908152602001604051809103902060050160149054906101000a900460ff1615611ceb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce290613591565b60405180910390fd5b6000600283604051611cfd919061352e565b908152602001604051809103902060010182604051611d1c919061352e565b908152602001604051809103902060006101000a81548160ff02191690831515021790555081604051611d4f919061352e565b60405180910390207ff2d32726779f6b937767cdd53ca44340d0af922c6c637bdab215b304d902157b82604051611d8691906135ea565b60405180910390a25050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611e1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e14906134d2565b60405180910390fd5b600282604051611e2d919061352e565b908152602001604051809103902060050160149054906101000a900460ff1615611e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8390613591565b60405180910390fd5b6000600283604051611e9e919061352e565b908152602001604051809103902060030182604051611ebd919061352e565b90815260200160405180910390208190555081604051611edd919061352e565b60405180910390207fc8c5be74dbecbc654092affff41a0d8109cef3213923e597b547241dc355cf2e82604051611f1491906135ea565b60405180910390a25050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611fab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa2906134d2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600285604051611fd3919061352e565b908152602001604051809103902060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461205b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205290613e95565b60405180910390fd5b6120636126b1565b83816000018190525082816040018190525081816080018190525060028560405161208e919061352e565b908152602001604051809103902060000181908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000190816120de9190613bae565b5060208201518160010190816120f49190613bae565b50604082015181600201908161210a9190613cdb565b5060608201518160030160006101000a81548160ff0219169083151502179055506080820151816004019060026121429291906126e8565b50505032600286604051612156919061352e565b908152602001604051809103902060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f79c88c074754eca102316c9e35da362da35dde8df9c3a975a24c60207646d879856040516121d491906135ea565b60405180910390a15050505050565b6121eb6126b1565b6002836040516121fb919061352e565b9081526020016040518091039020600001805490508210612251576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612248906138e7565b60405180910390fd5b600283604051612261919061352e565b9081526020016040518091039020600001828154811061228457612283613907565b5b90600052602060002090600602016040518060a00160405290816000820180546122ad906139d1565b80601f01602080910402602001604051908101604052809291908181526020018280546122d9906139d1565b80156123265780601f106122fb57610100808354040283529160200191612326565b820191906000526020600020905b81548152906001019060200180831161230957829003601f168201915b5050505050815260200160018201805461233f906139d1565b80601f016020809104026020016040519081016040528092919081815260200182805461236b906139d1565b80156123b85780601f1061238d576101008083540402835291602001916123b8565b820191906000526020600020905b81548152906001019060200180831161239b57829003601f168201915b505050505081526020016002820180546123d1906139d1565b80601f01602080910402602001604051908101604052809291908181526020018280546123fd906139d1565b801561244a5780601f1061241f5761010080835404028352916020019161244a565b820191906000526020600020905b81548152906001019060200180831161242d57829003601f168201915b505050505081526020016003820160009054906101000a900460ff16151515158152602001600482016002806020026040519081016040528092919082600280156124aa576020028201915b815481526020019060010190808311612496575b505050505081525050905092915050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253d906134d2565b60405180910390fd5b600282604051612556919061352e565b908152602001604051809103902060050160149054906101000a900460ff16156125b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ac90613591565b60405180910390fd5b60016002836040516125c7919061352e565b9081526020016040518091039020600101826040516125e6919061352e565b908152602001604051809103902060006101000a81548160ff02191690831515021790555081604051612619919061352e565b60405180910390207f7b081ab60e2b5916055b661b545c62638d8472b459efdf55571e87a60a83ec0e8260405161265091906135ea565b60405180910390a25050565b600060028360405161266e919061352e565b90815260200160405180910390206001018260405161268d919061352e565b908152602001604051809103902060009054906101000a900460ff16905092915050565b6040518060a001604052806060815260200160608152602001606081526020016000151581526020016126e2612728565b81525090565b8260028101928215612717579160200282015b828111156127165782518255916020019190600101906126fb565b5b509050612724919061274a565b5090565b6040518060400160405280600290602082028036833780820191505090505090565b5b8082111561276357600081600090555060010161274b565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127ce82612785565b810181811067ffffffffffffffff821117156127ed576127ec612796565b5b80604052505050565b6000612800612767565b905061280c82826127c5565b919050565b600067ffffffffffffffff82111561282c5761282b612796565b5b61283582612785565b9050602081019050919050565b82818337600083830152505050565b600061286461285f84612811565b6127f6565b9050828152602081018484840111156128805761287f612780565b5b61288b848285612842565b509392505050565b600082601f8301126128a8576128a761277b565b5b81356128b8848260208601612851565b91505092915050565b600080604083850312156128d8576128d7612771565b5b600083013567ffffffffffffffff8111156128f6576128f5612776565b5b61290285828601612893565b925050602083013567ffffffffffffffff81111561292357612922612776565b5b61292f85828601612893565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061296482612939565b9050919050565b61297481612959565b811461297f57600080fd5b50565b6000813590506129918161296b565b92915050565b6000602082840312156129ad576129ac612771565b5b60006129bb84828501612982565b91505092915050565b60008115159050919050565b6129d9816129c4565b82525050565b60006020820190506129f460008301846129d0565b92915050565b600060208284031215612a1057612a0f612771565b5b600082013567ffffffffffffffff811115612a2e57612a2d612776565b5b612a3a84828501612893565b91505092915050565b612a4c81612959565b82525050565b6000604082019050612a676000830185612a43565b612a7460208301846129d0565b9392505050565b6000602082019050612a906000830184612a43565b92915050565b612a9f816129c4565b8114612aaa57600080fd5b50565b600081359050612abc81612a96565b92915050565b600067ffffffffffffffff821115612add57612adc612796565b5b602082029050919050565b600080fd5b600067ffffffffffffffff821115612b0857612b07612796565b5b612b1182612785565b9050602081019050919050565b6000612b31612b2c84612aed565b6127f6565b905082815260208101848484011115612b4d57612b4c612780565b5b612b58848285612842565b509392505050565b600082601f830112612b7557612b7461277b565b5b8135612b85848260208601612b1e565b91505092915050565b6000612ba1612b9c84612ac2565b6127f6565b90508060208402830185811115612bbb57612bba612ae8565b5b835b81811015612c0257803567ffffffffffffffff811115612be057612bdf61277b565b5b808601612bed8982612b60565b85526020850194505050602081019050612bbd565b5050509392505050565b600082601f830112612c2157612c2061277b565b5b6005612c2e848285612b8e565b91505092915050565b600080600060608486031215612c5057612c4f612771565b5b6000612c5e86828701612982565b9350506020612c6f86828701612aad565b925050604084013567ffffffffffffffff811115612c9057612c8f612776565b5b612c9c86828701612c0c565b9150509250925092565b6000819050919050565b612cb981612ca6565b8114612cc457600080fd5b50565b600081359050612cd681612cb0565b92915050565b600080600060608486031215612cf557612cf4612771565b5b600084013567ffffffffffffffff811115612d1357612d12612776565b5b612d1f86828701612893565b9350506020612d3086828701612cc7565b9250506040612d4186828701612aad565b9150509250925092565b60008060008060808587031215612d6557612d64612771565b5b600085013567ffffffffffffffff811115612d8357612d82612776565b5b612d8f87828801612893565b9450506020612da087828801612cc7565b935050604085013567ffffffffffffffff811115612dc157612dc0612776565b5b612dcd87828801612893565b925050606085013567ffffffffffffffff811115612dee57612ded612776565b5b612dfa87828801612b60565b91505092959194509250565b612e0f81612ca6565b82525050565b6000602082019050612e2a6000830184612e06565b92915050565b600080600060608486031215612e4957612e48612771565b5b600084013567ffffffffffffffff811115612e6757612e66612776565b5b612e7386828701612893565b935050602084013567ffffffffffffffff811115612e9457612e93612776565b5b612ea086828701612893565b9250506040612eb186828701612cc7565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015612ef5578082015181840152602081019050612eda565b60008484015250505050565b6000612f0c82612ebb565b612f168185612ec6565b9350612f26818560208601612ed7565b612f2f81612785565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000612f6182612f3a565b612f6b8185612f45565b9350612f7b818560208601612ed7565b612f8481612785565b840191505092915050565b612f98816129c4565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b612fc781612ca6565b82525050565b6000612fd98383612fbe565b60208301905092915050565b6000602082019050919050565b612ffb81612f9e565b6130058184612fa9565b925061301082612fb4565b8060005b838110156130415781516130288782612fcd565b965061303383612fe5565b925050600181019050613014565b505050505050565b600060c08301600083015184820360008601526130668282612f01565b915050602083015184820360208601526130808282612f01565b9150506040830151848203604086015261309a8282612f56565b91505060608301516130af6060860182612f8f565b5060808301516130c26080860182612ff2565b508091505092915050565b600060208201905081810360008301526130e78184613049565b905092915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561311457613113612796565b5b602082029050919050565b600061313261312d846130f9565b6127f6565b9050806020840283018581111561314c5761314b612ae8565b5b835b8181101561317557806131618882612cc7565b84526020840193505060208101905061314e565b5050509392505050565b600082601f8301126131945761319361277b565b5b60026131a184828561311f565b91505092915050565b600060c082840312156131c0576131bf6130ef565b5b6131ca60a06127f6565b9050600082013567ffffffffffffffff8111156131ea576131e96130f4565b5b6131f684828501612893565b600083015250602082013567ffffffffffffffff81111561321a576132196130f4565b5b61322684828501612893565b602083015250604082013567ffffffffffffffff81111561324a576132496130f4565b5b61325684828501612b60565b604083015250606061326a84828501612aad565b606083015250608061327e8482850161317f565b60808301525092915050565b600080604083850312156132a1576132a0612771565b5b600083013567ffffffffffffffff8111156132bf576132be612776565b5b6132cb85828601612893565b925050602083013567ffffffffffffffff8111156132ec576132eb612776565b5b6132f8858286016131aa565b9150509250929050565b6000806040838503121561331957613318612771565b5b600083013567ffffffffffffffff81111561333757613336612776565b5b61334385828601612893565b925050602061335485828601612aad565b9150509250929050565b60008060008060a0858703121561337857613377612771565b5b600085013567ffffffffffffffff81111561339657613395612776565b5b6133a287828801612893565b945050602085013567ffffffffffffffff8111156133c3576133c2612776565b5b6133cf87828801612893565b935050604085013567ffffffffffffffff8111156133f0576133ef612776565b5b6133fc87828801612b60565b925050606061340d8782880161317f565b91505092959194509250565b600080604083850312156134305761342f612771565b5b600083013567ffffffffffffffff81111561344e5761344d612776565b5b61345a85828601612893565b925050602061346b85828601612cc7565b9150509250929050565b600082825260208201905092915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b60006134bc600983613475565b91506134c782613486565b602082019050919050565b600060208201905081810360008301526134eb816134af565b9050919050565b600081905092915050565b600061350882612ebb565b61351281856134f2565b9350613522818560208601612ed7565b80840191505092915050565b600061353a82846134fd565b915081905092915050565b7f6469642064656163746976617465640000000000000000000000000000000000600082015250565b600061357b600f83613475565b915061358682613545565b602082019050919050565b600060208201905081810360008301526135aa8161356e565b9050919050565b60006135bc82612ebb565b6135c68185613475565b93506135d6818560208601612ed7565b6135df81612785565b840191505092915050565b6000602082019050818103600083015261360481846135b1565b905092915050565b7f6e65656420636f6e747261637420616464720000000000000000000000000000600082015250565b6000613642601283613475565b915061364d8261360c565b602082019050919050565b6000602082019050818103600083015261367181613635565b9050919050565b60008160601b9050919050565b600061369082613678565b9050919050565b60006136a282613685565b9050919050565b6136ba6136b582612959565b613697565b82525050565b7f6164640000000000000000000000000000000000000000000000000000000000600082015250565b60006136f66003836134f2565b9150613701826136c0565b600382019050919050565b60008160f81b9050919050565b60006137248261370c565b9050919050565b600061373682613719565b9050919050565b61374e613749826129c4565b61372b565b82525050565b600061376082866136a9565b60148201915061376f826136e9565b915061377b82856136a9565b60148201915061378b828461373d565b600182019150819050949350505050565b6000819050919050565b6137af8161379c565b82525050565b600060059050919050565b600081905092915050565b6000819050919050565b60006137e18383612f56565b905092915050565b6000602082019050919050565b6000613801826137b5565b61380b81856137c0565b93508360208202850161381d856137cb565b8060005b85811015613859578484038952815161383a85826137d5565b9450613845836137e9565b925060208a01995050600181019050613821565b50829750879550505050505092915050565b600060408201905061388060008301856137a6565b818103602083015261389281846137f6565b90509392505050565b7f6f7574206f6620696e6465780000000000000000000000000000000000000000600082015250565b60006138d1600c83613475565b91506138dc8261389b565b602082019050919050565b60006020820190508181036000830152613900816138c4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f766572696669636174696f6e2064656163746976617465640000000000000000600082015250565b600061396c601883613475565b915061397782613936565b602082019050919050565b6000602082019050818103600083015261399b8161395f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806139e957607f821691505b6020821081036139fc576139fb6139a2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613a647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613a27565b613a6e8683613a27565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613aab613aa6613aa184612ca6565b613a86565b612ca6565b9050919050565b6000819050919050565b613ac583613a90565b613ad9613ad182613ab2565b848454613a34565b825550505050565b600090565b613aee613ae1565b613af9818484613abc565b505050565b5b81811015613b1d57613b12600082613ae6565b600181019050613aff565b5050565b601f821115613b6257613b3381613a02565b613b3c84613a17565b81016020851015613b4b578190505b613b5f613b5785613a17565b830182613afe565b50505b505050565b600082821c905092915050565b6000613b8560001984600802613b67565b1980831691505092915050565b6000613b9e8383613b74565b9150826002028217905092915050565b613bb782612ebb565b67ffffffffffffffff811115613bd057613bcf612796565b5b613bda82546139d1565b613be5828285613b21565b600060209050601f831160018114613c185760008415613c06578287015190505b613c108582613b92565b865550613c78565b601f198416613c2686613a02565b60005b82811015613c4e57848901518255600182019150602085019450602081019050613c29565b86831015613c6b5784890151613c67601f891682613b74565b8355505b6001600288020188555050505b505050505050565b60008190508160005260206000209050919050565b601f821115613cd657613ca781613c80565b613cb084613a17565b81016020851015613cbf578190505b613cd3613ccb85613a17565b830182613afe565b50505b505050565b613ce482612f3a565b67ffffffffffffffff811115613cfd57613cfc612796565b5b613d0782546139d1565b613d12828285613c95565b600060209050601f831160018114613d455760008415613d33578287015190505b613d3d8582613b92565b865550613da5565b601f198416613d5386613c80565b60005b82811015613d7b57848901518255600182019150602085019450602081019050613d56565b86831015613d985784890151613d94601f891682613b74565b8355505b6001600288020188555050505b505050505050565b60006040820190508181036000830152613dc781856135b1565b9050613dd66020830184612e06565b9392505050565b7f696e76616c6964207075624b6579000000000000000000000000000000000000600082015250565b6000613e13600e83613475565b9150613e1e82613ddd565b602082019050919050565b60006020820190508181036000830152613e4281613e06565b9050919050565b7f6578697374656400000000000000000000000000000000000000000000000000600082015250565b6000613e7f600783613475565b9150613e8a82613e49565b602082019050919050565b60006020820190508181036000830152613eae81613e72565b905091905056fea2646970667358221220382f9495ef24a3c9e1dfd8bc446d666d9fc27f56240071a53d9ac4f5b323a3b464736f6c63430008100033",
}

// AccountdidABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountdidMetaData.ABI instead.
var AccountdidABI = AccountdidMetaData.ABI

// AccountdidBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountdidMetaData.Bin instead.
var AccountdidBin = AccountdidMetaData.Bin

// DeployAccountdid deploys a new Ethereum contract, binding an instance of Accountdid to it.
func DeployAccountdid(auth *bind.TransactOpts, backend bind.ContractBackend, _auth common.Address) (common.Address, *types.Transaction, *Accountdid, error) {
	parsed, err := AccountdidMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccountdidBin), backend, _auth)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accountdid{AccountdidCaller: AccountdidCaller{contract: contract}, AccountdidTransactor: AccountdidTransactor{contract: contract}, AccountdidFilterer: AccountdidFilterer{contract: contract}}, nil
}

// Accountdid is an auto generated Go binding around an Ethereum contract.
type Accountdid struct {
	AccountdidCaller     // Read-only binding to the contract
	AccountdidTransactor // Write-only binding to the contract
	AccountdidFilterer   // Log filterer for contract events
}

// AccountdidCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccountdidCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountdidTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccountdidTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountdidFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccountdidFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountdidSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccountdidSession struct {
	Contract     *Accountdid       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccountdidCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccountdidCallerSession struct {
	Contract *AccountdidCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AccountdidTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccountdidTransactorSession struct {
	Contract     *AccountdidTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccountdidRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccountdidRaw struct {
	Contract *Accountdid // Generic contract binding to access the raw methods on
}

// AccountdidCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccountdidCallerRaw struct {
	Contract *AccountdidCaller // Generic read-only contract binding to access the raw methods on
}

// AccountdidTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccountdidTransactorRaw struct {
	Contract *AccountdidTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccountdid creates a new instance of Accountdid, bound to a specific deployed contract.
func NewAccountdid(address common.Address, backend bind.ContractBackend) (*Accountdid, error) {
	contract, err := bindAccountdid(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accountdid{AccountdidCaller: AccountdidCaller{contract: contract}, AccountdidTransactor: AccountdidTransactor{contract: contract}, AccountdidFilterer: AccountdidFilterer{contract: contract}}, nil
}

// NewAccountdidCaller creates a new read-only instance of Accountdid, bound to a specific deployed contract.
func NewAccountdidCaller(address common.Address, caller bind.ContractCaller) (*AccountdidCaller, error) {
	contract, err := bindAccountdid(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccountdidCaller{contract: contract}, nil
}

// NewAccountdidTransactor creates a new write-only instance of Accountdid, bound to a specific deployed contract.
func NewAccountdidTransactor(address common.Address, transactor bind.ContractTransactor) (*AccountdidTransactor, error) {
	contract, err := bindAccountdid(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccountdidTransactor{contract: contract}, nil
}

// NewAccountdidFilterer creates a new log filterer instance of Accountdid, bound to a specific deployed contract.
func NewAccountdidFilterer(address common.Address, filterer bind.ContractFilterer) (*AccountdidFilterer, error) {
	contract, err := bindAccountdid(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccountdidFilterer{contract: contract}, nil
}

// bindAccountdid binds a generic wrapper to an already deployed contract.
func bindAccountdid(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccountdidABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accountdid *AccountdidRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accountdid.Contract.AccountdidCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accountdid *AccountdidRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accountdid.Contract.AccountdidTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accountdid *AccountdidRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accountdid.Contract.AccountdidTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accountdid *AccountdidCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accountdid.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accountdid *AccountdidTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accountdid.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accountdid *AccountdidTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accountdid.Contract.contract.Transact(opts, method, params...)
}

// Auth is a free data retrieval call binding the contract method 0xde9375f2.
//
// Solidity: function auth() view returns(address)
func (_Accountdid *AccountdidCaller) Auth(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "auth")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Auth is a free data retrieval call binding the contract method 0xde9375f2.
//
// Solidity: function auth() view returns(address)
func (_Accountdid *AccountdidSession) Auth() (common.Address, error) {
	return _Accountdid.Contract.Auth(&_Accountdid.CallOpts)
}

// Auth is a free data retrieval call binding the contract method 0xde9375f2.
//
// Solidity: function auth() view returns(address)
func (_Accountdid *AccountdidCallerSession) Auth() (common.Address, error) {
	return _Accountdid.Contract.Auth(&_Accountdid.CallOpts)
}

// Data is a free data retrieval call binding the contract method 0x04f6748c.
//
// Solidity: function data(string ) view returns(address addr, bool deactivated)
func (_Accountdid *AccountdidCaller) Data(opts *bind.CallOpts, arg0 string) (struct {
	Addr        common.Address
	Deactivated bool
}, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "data", arg0)

	outstruct := new(struct {
		Addr        common.Address
		Deactivated bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Deactivated = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// Data is a free data retrieval call binding the contract method 0x04f6748c.
//
// Solidity: function data(string ) view returns(address addr, bool deactivated)
func (_Accountdid *AccountdidSession) Data(arg0 string) (struct {
	Addr        common.Address
	Deactivated bool
}, error) {
	return _Accountdid.Contract.Data(&_Accountdid.CallOpts, arg0)
}

// Data is a free data retrieval call binding the contract method 0x04f6748c.
//
// Solidity: function data(string ) view returns(address addr, bool deactivated)
func (_Accountdid *AccountdidCallerSession) Data(arg0 string) (struct {
	Addr        common.Address
	Deactivated bool
}, error) {
	return _Accountdid.Contract.Data(&_Accountdid.CallOpts, arg0)
}

// GetMasterKeyAddr is a free data retrieval call binding the contract method 0x0e372676.
//
// Solidity: function getMasterKeyAddr(string did) view returns(address)
func (_Accountdid *AccountdidCaller) GetMasterKeyAddr(opts *bind.CallOpts, did string) (common.Address, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "getMasterKeyAddr", did)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMasterKeyAddr is a free data retrieval call binding the contract method 0x0e372676.
//
// Solidity: function getMasterKeyAddr(string did) view returns(address)
func (_Accountdid *AccountdidSession) GetMasterKeyAddr(did string) (common.Address, error) {
	return _Accountdid.Contract.GetMasterKeyAddr(&_Accountdid.CallOpts, did)
}

// GetMasterKeyAddr is a free data retrieval call binding the contract method 0x0e372676.
//
// Solidity: function getMasterKeyAddr(string did) view returns(address)
func (_Accountdid *AccountdidCallerSession) GetMasterKeyAddr(did string) (common.Address, error) {
	return _Accountdid.Contract.GetMasterKeyAddr(&_Accountdid.CallOpts, did)
}

// GetMasterVerification is a free data retrieval call binding the contract method 0xa174a4cc.
//
// Solidity: function getMasterVerification(string did) view returns((string,string,bytes,bool,uint256[2]))
func (_Accountdid *AccountdidCaller) GetMasterVerification(opts *bind.CallOpts, did string) (IAccountDidPublicKey, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "getMasterVerification", did)

	if err != nil {
		return *new(IAccountDidPublicKey), err
	}

	out0 := *abi.ConvertType(out[0], new(IAccountDidPublicKey)).(*IAccountDidPublicKey)

	return out0, err

}

// GetMasterVerification is a free data retrieval call binding the contract method 0xa174a4cc.
//
// Solidity: function getMasterVerification(string did) view returns((string,string,bytes,bool,uint256[2]))
func (_Accountdid *AccountdidSession) GetMasterVerification(did string) (IAccountDidPublicKey, error) {
	return _Accountdid.Contract.GetMasterVerification(&_Accountdid.CallOpts, did)
}

// GetMasterVerification is a free data retrieval call binding the contract method 0xa174a4cc.
//
// Solidity: function getMasterVerification(string did) view returns((string,string,bytes,bool,uint256[2]))
func (_Accountdid *AccountdidCallerSession) GetMasterVerification(did string) (IAccountDidPublicKey, error) {
	return _Accountdid.Contract.GetMasterVerification(&_Accountdid.CallOpts, did)
}

// GetVeri is a free data retrieval call binding the contract method 0xf7181a1a.
//
// Solidity: function getVeri(string did, uint256 index) view returns((string,string,bytes,bool,uint256[2]) pubKey)
func (_Accountdid *AccountdidCaller) GetVeri(opts *bind.CallOpts, did string, index *big.Int) (IAccountDidPublicKey, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "getVeri", did, index)

	if err != nil {
		return *new(IAccountDidPublicKey), err
	}

	out0 := *abi.ConvertType(out[0], new(IAccountDidPublicKey)).(*IAccountDidPublicKey)

	return out0, err

}

// GetVeri is a free data retrieval call binding the contract method 0xf7181a1a.
//
// Solidity: function getVeri(string did, uint256 index) view returns((string,string,bytes,bool,uint256[2]) pubKey)
func (_Accountdid *AccountdidSession) GetVeri(did string, index *big.Int) (IAccountDidPublicKey, error) {
	return _Accountdid.Contract.GetVeri(&_Accountdid.CallOpts, did, index)
}

// GetVeri is a free data retrieval call binding the contract method 0xf7181a1a.
//
// Solidity: function getVeri(string did, uint256 index) view returns((string,string,bytes,bool,uint256[2]) pubKey)
func (_Accountdid *AccountdidCallerSession) GetVeri(did string, index *big.Int) (IAccountDidPublicKey, error) {
	return _Accountdid.Contract.GetVeri(&_Accountdid.CallOpts, did, index)
}

// GetVeriLen is a free data retrieval call binding the contract method 0xc7948e4b.
//
// Solidity: function getVeriLen(string did) view returns(uint256)
func (_Accountdid *AccountdidCaller) GetVeriLen(opts *bind.CallOpts, did string) (*big.Int, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "getVeriLen", did)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVeriLen is a free data retrieval call binding the contract method 0xc7948e4b.
//
// Solidity: function getVeriLen(string did) view returns(uint256)
func (_Accountdid *AccountdidSession) GetVeriLen(did string) (*big.Int, error) {
	return _Accountdid.Contract.GetVeriLen(&_Accountdid.CallOpts, did)
}

// GetVeriLen is a free data retrieval call binding the contract method 0xc7948e4b.
//
// Solidity: function getVeriLen(string did) view returns(uint256)
func (_Accountdid *AccountdidCallerSession) GetVeriLen(did string) (*big.Int, error) {
	return _Accountdid.Contract.GetVeriLen(&_Accountdid.CallOpts, did)
}

// InAssertion is a free data retrieval call binding the contract method 0x7c01d259.
//
// Solidity: function inAssertion(string did, string id) view returns(bool)
func (_Accountdid *AccountdidCaller) InAssertion(opts *bind.CallOpts, did string, id string) (bool, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "inAssertion", did, id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InAssertion is a free data retrieval call binding the contract method 0x7c01d259.
//
// Solidity: function inAssertion(string did, string id) view returns(bool)
func (_Accountdid *AccountdidSession) InAssertion(did string, id string) (bool, error) {
	return _Accountdid.Contract.InAssertion(&_Accountdid.CallOpts, did, id)
}

// InAssertion is a free data retrieval call binding the contract method 0x7c01d259.
//
// Solidity: function inAssertion(string did, string id) view returns(bool)
func (_Accountdid *AccountdidCallerSession) InAssertion(did string, id string) (bool, error) {
	return _Accountdid.Contract.InAssertion(&_Accountdid.CallOpts, did, id)
}

// InAuth is a free data retrieval call binding the contract method 0xf888a7de.
//
// Solidity: function inAuth(string did, string id) view returns(bool)
func (_Accountdid *AccountdidCaller) InAuth(opts *bind.CallOpts, did string, id string) (bool, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "inAuth", did, id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InAuth is a free data retrieval call binding the contract method 0xf888a7de.
//
// Solidity: function inAuth(string did, string id) view returns(bool)
func (_Accountdid *AccountdidSession) InAuth(did string, id string) (bool, error) {
	return _Accountdid.Contract.InAuth(&_Accountdid.CallOpts, did, id)
}

// InAuth is a free data retrieval call binding the contract method 0xf888a7de.
//
// Solidity: function inAuth(string did, string id) view returns(bool)
func (_Accountdid *AccountdidCallerSession) InAuth(did string, id string) (bool, error) {
	return _Accountdid.Contract.InAuth(&_Accountdid.CallOpts, did, id)
}

// InDelegation is a free data retrieval call binding the contract method 0x7f0a84cc.
//
// Solidity: function inDelegation(string did, string id) view returns(uint256)
func (_Accountdid *AccountdidCaller) InDelegation(opts *bind.CallOpts, did string, id string) (*big.Int, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "inDelegation", did, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InDelegation is a free data retrieval call binding the contract method 0x7f0a84cc.
//
// Solidity: function inDelegation(string did, string id) view returns(uint256)
func (_Accountdid *AccountdidSession) InDelegation(did string, id string) (*big.Int, error) {
	return _Accountdid.Contract.InDelegation(&_Accountdid.CallOpts, did, id)
}

// InDelegation is a free data retrieval call binding the contract method 0x7f0a84cc.
//
// Solidity: function inDelegation(string did, string id) view returns(uint256)
func (_Accountdid *AccountdidCallerSession) InDelegation(did string, id string) (*big.Int, error) {
	return _Accountdid.Contract.InDelegation(&_Accountdid.CallOpts, did, id)
}

// InRecovery is a free data retrieval call binding the contract method 0xb4334b0d.
//
// Solidity: function inRecovery(string did, string id) view returns(bool)
func (_Accountdid *AccountdidCaller) InRecovery(opts *bind.CallOpts, did string, id string) (bool, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "inRecovery", did, id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InRecovery is a free data retrieval call binding the contract method 0xb4334b0d.
//
// Solidity: function inRecovery(string did, string id) view returns(bool)
func (_Accountdid *AccountdidSession) InRecovery(did string, id string) (bool, error) {
	return _Accountdid.Contract.InRecovery(&_Accountdid.CallOpts, did, id)
}

// InRecovery is a free data retrieval call binding the contract method 0xb4334b0d.
//
// Solidity: function inRecovery(string did, string id) view returns(bool)
func (_Accountdid *AccountdidCallerSession) InRecovery(did string, id string) (bool, error) {
	return _Accountdid.Contract.InRecovery(&_Accountdid.CallOpts, did, id)
}

// IsDeactivated is a free data retrieval call binding the contract method 0xe0064236.
//
// Solidity: function isDeactivated(string did) view returns(bool)
func (_Accountdid *AccountdidCaller) IsDeactivated(opts *bind.CallOpts, did string) (bool, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "isDeactivated", did)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsDeactivated is a free data retrieval call binding the contract method 0xe0064236.
//
// Solidity: function isDeactivated(string did) view returns(bool)
func (_Accountdid *AccountdidSession) IsDeactivated(did string) (bool, error) {
	return _Accountdid.Contract.IsDeactivated(&_Accountdid.CallOpts, did)
}

// IsDeactivated is a free data retrieval call binding the contract method 0xe0064236.
//
// Solidity: function isDeactivated(string did) view returns(bool)
func (_Accountdid *AccountdidCallerSession) IsDeactivated(did string) (bool, error) {
	return _Accountdid.Contract.IsDeactivated(&_Accountdid.CallOpts, did)
}

// Owners is a free data retrieval call binding the contract method 0x022914a7.
//
// Solidity: function owners(address ) view returns(bool)
func (_Accountdid *AccountdidCaller) Owners(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Accountdid.contract.Call(opts, &out, "owners", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Owners is a free data retrieval call binding the contract method 0x022914a7.
//
// Solidity: function owners(address ) view returns(bool)
func (_Accountdid *AccountdidSession) Owners(arg0 common.Address) (bool, error) {
	return _Accountdid.Contract.Owners(&_Accountdid.CallOpts, arg0)
}

// Owners is a free data retrieval call binding the contract method 0x022914a7.
//
// Solidity: function owners(address ) view returns(bool)
func (_Accountdid *AccountdidCallerSession) Owners(arg0 common.Address) (bool, error) {
	return _Accountdid.Contract.Owners(&_Accountdid.CallOpts, arg0)
}

// Add is a paid mutator transaction binding the contract method 0x4bf1b134.
//
// Solidity: function add(address _a, bool isSet, bytes[5] signs) returns()
func (_Accountdid *AccountdidTransactor) Add(opts *bind.TransactOpts, _a common.Address, isSet bool, signs [5][]byte) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "add", _a, isSet, signs)
}

// Add is a paid mutator transaction binding the contract method 0x4bf1b134.
//
// Solidity: function add(address _a, bool isSet, bytes[5] signs) returns()
func (_Accountdid *AccountdidSession) Add(_a common.Address, isSet bool, signs [5][]byte) (*types.Transaction, error) {
	return _Accountdid.Contract.Add(&_Accountdid.TransactOpts, _a, isSet, signs)
}

// Add is a paid mutator transaction binding the contract method 0x4bf1b134.
//
// Solidity: function add(address _a, bool isSet, bytes[5] signs) returns()
func (_Accountdid *AccountdidTransactorSession) Add(_a common.Address, isSet bool, signs [5][]byte) (*types.Transaction, error) {
	return _Accountdid.Contract.Add(&_Accountdid.TransactOpts, _a, isSet, signs)
}

// AddAssertion is a paid mutator transaction binding the contract method 0x50031b76.
//
// Solidity: function addAssertion(string did, string id) returns()
func (_Accountdid *AccountdidTransactor) AddAssertion(opts *bind.TransactOpts, did string, id string) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "addAssertion", did, id)
}

// AddAssertion is a paid mutator transaction binding the contract method 0x50031b76.
//
// Solidity: function addAssertion(string did, string id) returns()
func (_Accountdid *AccountdidSession) AddAssertion(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.AddAssertion(&_Accountdid.TransactOpts, did, id)
}

// AddAssertion is a paid mutator transaction binding the contract method 0x50031b76.
//
// Solidity: function addAssertion(string did, string id) returns()
func (_Accountdid *AccountdidTransactorSession) AddAssertion(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.AddAssertion(&_Accountdid.TransactOpts, did, id)
}

// AddAuth is a paid mutator transaction binding the contract method 0xf81568bd.
//
// Solidity: function addAuth(string did, string id) returns()
func (_Accountdid *AccountdidTransactor) AddAuth(opts *bind.TransactOpts, did string, id string) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "addAuth", did, id)
}

// AddAuth is a paid mutator transaction binding the contract method 0xf81568bd.
//
// Solidity: function addAuth(string did, string id) returns()
func (_Accountdid *AccountdidSession) AddAuth(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.AddAuth(&_Accountdid.TransactOpts, did, id)
}

// AddAuth is a paid mutator transaction binding the contract method 0xf81568bd.
//
// Solidity: function addAuth(string did, string id) returns()
func (_Accountdid *AccountdidTransactorSession) AddAuth(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.AddAuth(&_Accountdid.TransactOpts, did, id)
}

// AddDelegation is a paid mutator transaction binding the contract method 0x9045322c.
//
// Solidity: function addDelegation(string did, string id, uint256 expiration) returns()
func (_Accountdid *AccountdidTransactor) AddDelegation(opts *bind.TransactOpts, did string, id string, expiration *big.Int) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "addDelegation", did, id, expiration)
}

// AddDelegation is a paid mutator transaction binding the contract method 0x9045322c.
//
// Solidity: function addDelegation(string did, string id, uint256 expiration) returns()
func (_Accountdid *AccountdidSession) AddDelegation(did string, id string, expiration *big.Int) (*types.Transaction, error) {
	return _Accountdid.Contract.AddDelegation(&_Accountdid.TransactOpts, did, id, expiration)
}

// AddDelegation is a paid mutator transaction binding the contract method 0x9045322c.
//
// Solidity: function addDelegation(string did, string id, uint256 expiration) returns()
func (_Accountdid *AccountdidTransactorSession) AddDelegation(did string, id string, expiration *big.Int) (*types.Transaction, error) {
	return _Accountdid.Contract.AddDelegation(&_Accountdid.TransactOpts, did, id, expiration)
}

// AddRecovery is a paid mutator transaction binding the contract method 0x00d13cf1.
//
// Solidity: function addRecovery(string did, string id) returns()
func (_Accountdid *AccountdidTransactor) AddRecovery(opts *bind.TransactOpts, did string, id string) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "addRecovery", did, id)
}

// AddRecovery is a paid mutator transaction binding the contract method 0x00d13cf1.
//
// Solidity: function addRecovery(string did, string id) returns()
func (_Accountdid *AccountdidSession) AddRecovery(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.AddRecovery(&_Accountdid.TransactOpts, did, id)
}

// AddRecovery is a paid mutator transaction binding the contract method 0x00d13cf1.
//
// Solidity: function addRecovery(string did, string id) returns()
func (_Accountdid *AccountdidTransactorSession) AddRecovery(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.AddRecovery(&_Accountdid.TransactOpts, did, id)
}

// AddVeri is a paid mutator transaction binding the contract method 0xc7469dc1.
//
// Solidity: function addVeri(string did, (string,string,bytes,bool,uint256[2]) pubKey) returns()
func (_Accountdid *AccountdidTransactor) AddVeri(opts *bind.TransactOpts, did string, pubKey IAccountDidPublicKey) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "addVeri", did, pubKey)
}

// AddVeri is a paid mutator transaction binding the contract method 0xc7469dc1.
//
// Solidity: function addVeri(string did, (string,string,bytes,bool,uint256[2]) pubKey) returns()
func (_Accountdid *AccountdidSession) AddVeri(did string, pubKey IAccountDidPublicKey) (*types.Transaction, error) {
	return _Accountdid.Contract.AddVeri(&_Accountdid.TransactOpts, did, pubKey)
}

// AddVeri is a paid mutator transaction binding the contract method 0xc7469dc1.
//
// Solidity: function addVeri(string did, (string,string,bytes,bool,uint256[2]) pubKey) returns()
func (_Accountdid *AccountdidTransactorSession) AddVeri(did string, pubKey IAccountDidPublicKey) (*types.Transaction, error) {
	return _Accountdid.Contract.AddVeri(&_Accountdid.TransactOpts, did, pubKey)
}

// CreateDID is a paid mutator transaction binding the contract method 0xf30d5063.
//
// Solidity: function createDID(string did, string _methodType, bytes _pubKeyData, uint256[2] _pubKeyPoint) returns()
func (_Accountdid *AccountdidTransactor) CreateDID(opts *bind.TransactOpts, did string, _methodType string, _pubKeyData []byte, _pubKeyPoint [2]*big.Int) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "createDID", did, _methodType, _pubKeyData, _pubKeyPoint)
}

// CreateDID is a paid mutator transaction binding the contract method 0xf30d5063.
//
// Solidity: function createDID(string did, string _methodType, bytes _pubKeyData, uint256[2] _pubKeyPoint) returns()
func (_Accountdid *AccountdidSession) CreateDID(did string, _methodType string, _pubKeyData []byte, _pubKeyPoint [2]*big.Int) (*types.Transaction, error) {
	return _Accountdid.Contract.CreateDID(&_Accountdid.TransactOpts, did, _methodType, _pubKeyData, _pubKeyPoint)
}

// CreateDID is a paid mutator transaction binding the contract method 0xf30d5063.
//
// Solidity: function createDID(string did, string _methodType, bytes _pubKeyData, uint256[2] _pubKeyPoint) returns()
func (_Accountdid *AccountdidTransactorSession) CreateDID(did string, _methodType string, _pubKeyData []byte, _pubKeyPoint [2]*big.Int) (*types.Transaction, error) {
	return _Accountdid.Contract.CreateDID(&_Accountdid.TransactOpts, did, _methodType, _pubKeyData, _pubKeyPoint)
}

// DeactivateDID is a paid mutator transaction binding the contract method 0xc9be3599.
//
// Solidity: function deactivateDID(string did, bool deactivate) returns()
func (_Accountdid *AccountdidTransactor) DeactivateDID(opts *bind.TransactOpts, did string, deactivate bool) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "deactivateDID", did, deactivate)
}

// DeactivateDID is a paid mutator transaction binding the contract method 0xc9be3599.
//
// Solidity: function deactivateDID(string did, bool deactivate) returns()
func (_Accountdid *AccountdidSession) DeactivateDID(did string, deactivate bool) (*types.Transaction, error) {
	return _Accountdid.Contract.DeactivateDID(&_Accountdid.TransactOpts, did, deactivate)
}

// DeactivateDID is a paid mutator transaction binding the contract method 0xc9be3599.
//
// Solidity: function deactivateDID(string did, bool deactivate) returns()
func (_Accountdid *AccountdidTransactorSession) DeactivateDID(did string, deactivate bool) (*types.Transaction, error) {
	return _Accountdid.Contract.DeactivateDID(&_Accountdid.TransactOpts, did, deactivate)
}

// DeactivateVeri is a paid mutator transaction binding the contract method 0x51ac5022.
//
// Solidity: function deactivateVeri(string did, uint256 index, bool deactivate) returns()
func (_Accountdid *AccountdidTransactor) DeactivateVeri(opts *bind.TransactOpts, did string, index *big.Int, deactivate bool) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "deactivateVeri", did, index, deactivate)
}

// DeactivateVeri is a paid mutator transaction binding the contract method 0x51ac5022.
//
// Solidity: function deactivateVeri(string did, uint256 index, bool deactivate) returns()
func (_Accountdid *AccountdidSession) DeactivateVeri(did string, index *big.Int, deactivate bool) (*types.Transaction, error) {
	return _Accountdid.Contract.DeactivateVeri(&_Accountdid.TransactOpts, did, index, deactivate)
}

// DeactivateVeri is a paid mutator transaction binding the contract method 0x51ac5022.
//
// Solidity: function deactivateVeri(string did, uint256 index, bool deactivate) returns()
func (_Accountdid *AccountdidTransactorSession) DeactivateVeri(did string, index *big.Int, deactivate bool) (*types.Transaction, error) {
	return _Accountdid.Contract.DeactivateVeri(&_Accountdid.TransactOpts, did, index, deactivate)
}

// RemoveAssertion is a paid mutator transaction binding the contract method 0x7904ee08.
//
// Solidity: function removeAssertion(string did, string id) returns()
func (_Accountdid *AccountdidTransactor) RemoveAssertion(opts *bind.TransactOpts, did string, id string) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "removeAssertion", did, id)
}

// RemoveAssertion is a paid mutator transaction binding the contract method 0x7904ee08.
//
// Solidity: function removeAssertion(string did, string id) returns()
func (_Accountdid *AccountdidSession) RemoveAssertion(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.RemoveAssertion(&_Accountdid.TransactOpts, did, id)
}

// RemoveAssertion is a paid mutator transaction binding the contract method 0x7904ee08.
//
// Solidity: function removeAssertion(string did, string id) returns()
func (_Accountdid *AccountdidTransactorSession) RemoveAssertion(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.RemoveAssertion(&_Accountdid.TransactOpts, did, id)
}

// RemoveAuth is a paid mutator transaction binding the contract method 0xe9454a14.
//
// Solidity: function removeAuth(string did, string id) returns()
func (_Accountdid *AccountdidTransactor) RemoveAuth(opts *bind.TransactOpts, did string, id string) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "removeAuth", did, id)
}

// RemoveAuth is a paid mutator transaction binding the contract method 0xe9454a14.
//
// Solidity: function removeAuth(string did, string id) returns()
func (_Accountdid *AccountdidSession) RemoveAuth(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.RemoveAuth(&_Accountdid.TransactOpts, did, id)
}

// RemoveAuth is a paid mutator transaction binding the contract method 0xe9454a14.
//
// Solidity: function removeAuth(string did, string id) returns()
func (_Accountdid *AccountdidTransactorSession) RemoveAuth(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.RemoveAuth(&_Accountdid.TransactOpts, did, id)
}

// RemoveDelegation is a paid mutator transaction binding the contract method 0xf140545b.
//
// Solidity: function removeDelegation(string did, string id) returns()
func (_Accountdid *AccountdidTransactor) RemoveDelegation(opts *bind.TransactOpts, did string, id string) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "removeDelegation", did, id)
}

// RemoveDelegation is a paid mutator transaction binding the contract method 0xf140545b.
//
// Solidity: function removeDelegation(string did, string id) returns()
func (_Accountdid *AccountdidSession) RemoveDelegation(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.RemoveDelegation(&_Accountdid.TransactOpts, did, id)
}

// RemoveDelegation is a paid mutator transaction binding the contract method 0xf140545b.
//
// Solidity: function removeDelegation(string did, string id) returns()
func (_Accountdid *AccountdidTransactorSession) RemoveDelegation(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.RemoveDelegation(&_Accountdid.TransactOpts, did, id)
}

// RemoveRecovery is a paid mutator transaction binding the contract method 0xc1613ed4.
//
// Solidity: function removeRecovery(string did, string id) returns()
func (_Accountdid *AccountdidTransactor) RemoveRecovery(opts *bind.TransactOpts, did string, id string) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "removeRecovery", did, id)
}

// RemoveRecovery is a paid mutator transaction binding the contract method 0xc1613ed4.
//
// Solidity: function removeRecovery(string did, string id) returns()
func (_Accountdid *AccountdidSession) RemoveRecovery(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.RemoveRecovery(&_Accountdid.TransactOpts, did, id)
}

// RemoveRecovery is a paid mutator transaction binding the contract method 0xc1613ed4.
//
// Solidity: function removeRecovery(string did, string id) returns()
func (_Accountdid *AccountdidTransactorSession) RemoveRecovery(did string, id string) (*types.Transaction, error) {
	return _Accountdid.Contract.RemoveRecovery(&_Accountdid.TransactOpts, did, id)
}

// UpdateVeri is a paid mutator transaction binding the contract method 0x58ba1928.
//
// Solidity: function updateVeri(string did, uint256 index, string methodType, bytes pubKeyData) returns()
func (_Accountdid *AccountdidTransactor) UpdateVeri(opts *bind.TransactOpts, did string, index *big.Int, methodType string, pubKeyData []byte) (*types.Transaction, error) {
	return _Accountdid.contract.Transact(opts, "updateVeri", did, index, methodType, pubKeyData)
}

// UpdateVeri is a paid mutator transaction binding the contract method 0x58ba1928.
//
// Solidity: function updateVeri(string did, uint256 index, string methodType, bytes pubKeyData) returns()
func (_Accountdid *AccountdidSession) UpdateVeri(did string, index *big.Int, methodType string, pubKeyData []byte) (*types.Transaction, error) {
	return _Accountdid.Contract.UpdateVeri(&_Accountdid.TransactOpts, did, index, methodType, pubKeyData)
}

// UpdateVeri is a paid mutator transaction binding the contract method 0x58ba1928.
//
// Solidity: function updateVeri(string did, uint256 index, string methodType, bytes pubKeyData) returns()
func (_Accountdid *AccountdidTransactorSession) UpdateVeri(did string, index *big.Int, methodType string, pubKeyData []byte) (*types.Transaction, error) {
	return _Accountdid.Contract.UpdateVeri(&_Accountdid.TransactOpts, did, index, methodType, pubKeyData)
}

// AccountdidAddAssertionIterator is returned from FilterAddAssertion and is used to iterate over the raw logs and unpacked data for AddAssertion events raised by the Accountdid contract.
type AccountdidAddAssertionIterator struct {
	Event *AccountdidAddAssertion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidAddAssertionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidAddAssertion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidAddAssertion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidAddAssertionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidAddAssertionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidAddAssertion represents a AddAssertion event raised by the Accountdid contract.
type AccountdidAddAssertion struct {
	Did common.Hash
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAddAssertion is a free log retrieval operation binding the contract event 0x3dc8a6dcefb090c20c6f37f01dabde1a17b9c6dd4969ce7e78206888764c2490.
//
// Solidity: event AddAssertion(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) FilterAddAssertion(opts *bind.FilterOpts, did []string) (*AccountdidAddAssertionIterator, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "AddAssertion", didRule)
	if err != nil {
		return nil, err
	}
	return &AccountdidAddAssertionIterator{contract: _Accountdid.contract, event: "AddAssertion", logs: logs, sub: sub}, nil
}

// WatchAddAssertion is a free log subscription operation binding the contract event 0x3dc8a6dcefb090c20c6f37f01dabde1a17b9c6dd4969ce7e78206888764c2490.
//
// Solidity: event AddAssertion(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) WatchAddAssertion(opts *bind.WatchOpts, sink chan<- *AccountdidAddAssertion, did []string) (event.Subscription, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "AddAssertion", didRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidAddAssertion)
				if err := _Accountdid.contract.UnpackLog(event, "AddAssertion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddAssertion is a log parse operation binding the contract event 0x3dc8a6dcefb090c20c6f37f01dabde1a17b9c6dd4969ce7e78206888764c2490.
//
// Solidity: event AddAssertion(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) ParseAddAssertion(log types.Log) (*AccountdidAddAssertion, error) {
	event := new(AccountdidAddAssertion)
	if err := _Accountdid.contract.UnpackLog(event, "AddAssertion", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidAddAuthIterator is returned from FilterAddAuth and is used to iterate over the raw logs and unpacked data for AddAuth events raised by the Accountdid contract.
type AccountdidAddAuthIterator struct {
	Event *AccountdidAddAuth // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidAddAuthIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidAddAuth)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidAddAuth)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidAddAuthIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidAddAuthIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidAddAuth represents a AddAuth event raised by the Accountdid contract.
type AccountdidAddAuth struct {
	Did common.Hash
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAddAuth is a free log retrieval operation binding the contract event 0x7b081ab60e2b5916055b661b545c62638d8472b459efdf55571e87a60a83ec0e.
//
// Solidity: event AddAuth(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) FilterAddAuth(opts *bind.FilterOpts, did []string) (*AccountdidAddAuthIterator, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "AddAuth", didRule)
	if err != nil {
		return nil, err
	}
	return &AccountdidAddAuthIterator{contract: _Accountdid.contract, event: "AddAuth", logs: logs, sub: sub}, nil
}

// WatchAddAuth is a free log subscription operation binding the contract event 0x7b081ab60e2b5916055b661b545c62638d8472b459efdf55571e87a60a83ec0e.
//
// Solidity: event AddAuth(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) WatchAddAuth(opts *bind.WatchOpts, sink chan<- *AccountdidAddAuth, did []string) (event.Subscription, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "AddAuth", didRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidAddAuth)
				if err := _Accountdid.contract.UnpackLog(event, "AddAuth", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddAuth is a log parse operation binding the contract event 0x7b081ab60e2b5916055b661b545c62638d8472b459efdf55571e87a60a83ec0e.
//
// Solidity: event AddAuth(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) ParseAddAuth(log types.Log) (*AccountdidAddAuth, error) {
	event := new(AccountdidAddAuth)
	if err := _Accountdid.contract.UnpackLog(event, "AddAuth", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidAddDelegationIterator is returned from FilterAddDelegation and is used to iterate over the raw logs and unpacked data for AddDelegation events raised by the Accountdid contract.
type AccountdidAddDelegationIterator struct {
	Event *AccountdidAddDelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidAddDelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidAddDelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidAddDelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidAddDelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidAddDelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidAddDelegation represents a AddDelegation event raised by the Accountdid contract.
type AccountdidAddDelegation struct {
	Did        common.Hash
	Id         string
	Expiration *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAddDelegation is a free log retrieval operation binding the contract event 0xd8b844a934c50876df4c445f08f47cc0ec2dc234e128be3af72b2f86e89da060.
//
// Solidity: event AddDelegation(string indexed did, string id, uint256 expiration)
func (_Accountdid *AccountdidFilterer) FilterAddDelegation(opts *bind.FilterOpts, did []string) (*AccountdidAddDelegationIterator, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "AddDelegation", didRule)
	if err != nil {
		return nil, err
	}
	return &AccountdidAddDelegationIterator{contract: _Accountdid.contract, event: "AddDelegation", logs: logs, sub: sub}, nil
}

// WatchAddDelegation is a free log subscription operation binding the contract event 0xd8b844a934c50876df4c445f08f47cc0ec2dc234e128be3af72b2f86e89da060.
//
// Solidity: event AddDelegation(string indexed did, string id, uint256 expiration)
func (_Accountdid *AccountdidFilterer) WatchAddDelegation(opts *bind.WatchOpts, sink chan<- *AccountdidAddDelegation, did []string) (event.Subscription, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "AddDelegation", didRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidAddDelegation)
				if err := _Accountdid.contract.UnpackLog(event, "AddDelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddDelegation is a log parse operation binding the contract event 0xd8b844a934c50876df4c445f08f47cc0ec2dc234e128be3af72b2f86e89da060.
//
// Solidity: event AddDelegation(string indexed did, string id, uint256 expiration)
func (_Accountdid *AccountdidFilterer) ParseAddDelegation(log types.Log) (*AccountdidAddDelegation, error) {
	event := new(AccountdidAddDelegation)
	if err := _Accountdid.contract.UnpackLog(event, "AddDelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidAddOwnerIterator is returned from FilterAddOwner and is used to iterate over the raw logs and unpacked data for AddOwner events raised by the Accountdid contract.
type AccountdidAddOwnerIterator struct {
	Event *AccountdidAddOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidAddOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidAddOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidAddOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidAddOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidAddOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidAddOwner represents a AddOwner event raised by the Accountdid contract.
type AccountdidAddOwner struct {
	From  common.Address
	IsSet bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddOwner is a free log retrieval operation binding the contract event 0x938b2a24c98e4e542127ffa74a91e48942c2bddccae3b6d75f82bfda7bbc0807.
//
// Solidity: event AddOwner(address from, bool isSet)
func (_Accountdid *AccountdidFilterer) FilterAddOwner(opts *bind.FilterOpts) (*AccountdidAddOwnerIterator, error) {

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "AddOwner")
	if err != nil {
		return nil, err
	}
	return &AccountdidAddOwnerIterator{contract: _Accountdid.contract, event: "AddOwner", logs: logs, sub: sub}, nil
}

// WatchAddOwner is a free log subscription operation binding the contract event 0x938b2a24c98e4e542127ffa74a91e48942c2bddccae3b6d75f82bfda7bbc0807.
//
// Solidity: event AddOwner(address from, bool isSet)
func (_Accountdid *AccountdidFilterer) WatchAddOwner(opts *bind.WatchOpts, sink chan<- *AccountdidAddOwner) (event.Subscription, error) {

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "AddOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidAddOwner)
				if err := _Accountdid.contract.UnpackLog(event, "AddOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddOwner is a log parse operation binding the contract event 0x938b2a24c98e4e542127ffa74a91e48942c2bddccae3b6d75f82bfda7bbc0807.
//
// Solidity: event AddOwner(address from, bool isSet)
func (_Accountdid *AccountdidFilterer) ParseAddOwner(log types.Log) (*AccountdidAddOwner, error) {
	event := new(AccountdidAddOwner)
	if err := _Accountdid.contract.UnpackLog(event, "AddOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidAddRecoveryIterator is returned from FilterAddRecovery and is used to iterate over the raw logs and unpacked data for AddRecovery events raised by the Accountdid contract.
type AccountdidAddRecoveryIterator struct {
	Event *AccountdidAddRecovery // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidAddRecoveryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidAddRecovery)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidAddRecovery)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidAddRecoveryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidAddRecoveryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidAddRecovery represents a AddRecovery event raised by the Accountdid contract.
type AccountdidAddRecovery struct {
	Did      common.Hash
	Recovery string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAddRecovery is a free log retrieval operation binding the contract event 0x3cd3cc4e2cfc49d39689a2f57840dd97e5b351162eacf217a43e35297a7e91f9.
//
// Solidity: event AddRecovery(string indexed did, string recovery)
func (_Accountdid *AccountdidFilterer) FilterAddRecovery(opts *bind.FilterOpts, did []string) (*AccountdidAddRecoveryIterator, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "AddRecovery", didRule)
	if err != nil {
		return nil, err
	}
	return &AccountdidAddRecoveryIterator{contract: _Accountdid.contract, event: "AddRecovery", logs: logs, sub: sub}, nil
}

// WatchAddRecovery is a free log subscription operation binding the contract event 0x3cd3cc4e2cfc49d39689a2f57840dd97e5b351162eacf217a43e35297a7e91f9.
//
// Solidity: event AddRecovery(string indexed did, string recovery)
func (_Accountdid *AccountdidFilterer) WatchAddRecovery(opts *bind.WatchOpts, sink chan<- *AccountdidAddRecovery, did []string) (event.Subscription, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "AddRecovery", didRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidAddRecovery)
				if err := _Accountdid.contract.UnpackLog(event, "AddRecovery", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddRecovery is a log parse operation binding the contract event 0x3cd3cc4e2cfc49d39689a2f57840dd97e5b351162eacf217a43e35297a7e91f9.
//
// Solidity: event AddRecovery(string indexed did, string recovery)
func (_Accountdid *AccountdidFilterer) ParseAddRecovery(log types.Log) (*AccountdidAddRecovery, error) {
	event := new(AccountdidAddRecovery)
	if err := _Accountdid.contract.UnpackLog(event, "AddRecovery", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidAddVeriIterator is returned from FilterAddVeri and is used to iterate over the raw logs and unpacked data for AddVeri events raised by the Accountdid contract.
type AccountdidAddVeriIterator struct {
	Event *AccountdidAddVeri // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidAddVeriIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidAddVeri)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidAddVeri)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidAddVeriIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidAddVeriIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidAddVeri represents a AddVeri event raised by the Accountdid contract.
type AccountdidAddVeri struct {
	Did common.Hash
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAddVeri is a free log retrieval operation binding the contract event 0x7d14d7731faefa682df55a71db25727d5a1120c74cd2cd0fb4e2fe58e3adc8dd.
//
// Solidity: event AddVeri(string indexed did, uint256 id)
func (_Accountdid *AccountdidFilterer) FilterAddVeri(opts *bind.FilterOpts, did []string) (*AccountdidAddVeriIterator, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "AddVeri", didRule)
	if err != nil {
		return nil, err
	}
	return &AccountdidAddVeriIterator{contract: _Accountdid.contract, event: "AddVeri", logs: logs, sub: sub}, nil
}

// WatchAddVeri is a free log subscription operation binding the contract event 0x7d14d7731faefa682df55a71db25727d5a1120c74cd2cd0fb4e2fe58e3adc8dd.
//
// Solidity: event AddVeri(string indexed did, uint256 id)
func (_Accountdid *AccountdidFilterer) WatchAddVeri(opts *bind.WatchOpts, sink chan<- *AccountdidAddVeri, did []string) (event.Subscription, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "AddVeri", didRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidAddVeri)
				if err := _Accountdid.contract.UnpackLog(event, "AddVeri", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddVeri is a log parse operation binding the contract event 0x7d14d7731faefa682df55a71db25727d5a1120c74cd2cd0fb4e2fe58e3adc8dd.
//
// Solidity: event AddVeri(string indexed did, uint256 id)
func (_Accountdid *AccountdidFilterer) ParseAddVeri(log types.Log) (*AccountdidAddVeri, error) {
	event := new(AccountdidAddVeri)
	if err := _Accountdid.contract.UnpackLog(event, "AddVeri", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidCreateDIDIterator is returned from FilterCreateDID and is used to iterate over the raw logs and unpacked data for CreateDID events raised by the Accountdid contract.
type AccountdidCreateDIDIterator struct {
	Event *AccountdidCreateDID // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidCreateDIDIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidCreateDID)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidCreateDID)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidCreateDIDIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidCreateDIDIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidCreateDID represents a CreateDID event raised by the Accountdid contract.
type AccountdidCreateDID struct {
	Did string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCreateDID is a free log retrieval operation binding the contract event 0x79c88c074754eca102316c9e35da362da35dde8df9c3a975a24c60207646d879.
//
// Solidity: event CreateDID(string did)
func (_Accountdid *AccountdidFilterer) FilterCreateDID(opts *bind.FilterOpts) (*AccountdidCreateDIDIterator, error) {

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "CreateDID")
	if err != nil {
		return nil, err
	}
	return &AccountdidCreateDIDIterator{contract: _Accountdid.contract, event: "CreateDID", logs: logs, sub: sub}, nil
}

// WatchCreateDID is a free log subscription operation binding the contract event 0x79c88c074754eca102316c9e35da362da35dde8df9c3a975a24c60207646d879.
//
// Solidity: event CreateDID(string did)
func (_Accountdid *AccountdidFilterer) WatchCreateDID(opts *bind.WatchOpts, sink chan<- *AccountdidCreateDID) (event.Subscription, error) {

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "CreateDID")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidCreateDID)
				if err := _Accountdid.contract.UnpackLog(event, "CreateDID", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateDID is a log parse operation binding the contract event 0x79c88c074754eca102316c9e35da362da35dde8df9c3a975a24c60207646d879.
//
// Solidity: event CreateDID(string did)
func (_Accountdid *AccountdidFilterer) ParseCreateDID(log types.Log) (*AccountdidCreateDID, error) {
	event := new(AccountdidCreateDID)
	if err := _Accountdid.contract.UnpackLog(event, "CreateDID", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidDeactivateDIDIterator is returned from FilterDeactivateDID and is used to iterate over the raw logs and unpacked data for DeactivateDID events raised by the Accountdid contract.
type AccountdidDeactivateDIDIterator struct {
	Event *AccountdidDeactivateDID // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidDeactivateDIDIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidDeactivateDID)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidDeactivateDID)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidDeactivateDIDIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidDeactivateDIDIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidDeactivateDID represents a DeactivateDID event raised by the Accountdid contract.
type AccountdidDeactivateDID struct {
	Did string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterDeactivateDID is a free log retrieval operation binding the contract event 0x2057c1bebefc71cf1116bc35105e72c4ec2baa1014a67f924edda51eee4565e8.
//
// Solidity: event DeactivateDID(string did)
func (_Accountdid *AccountdidFilterer) FilterDeactivateDID(opts *bind.FilterOpts) (*AccountdidDeactivateDIDIterator, error) {

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "DeactivateDID")
	if err != nil {
		return nil, err
	}
	return &AccountdidDeactivateDIDIterator{contract: _Accountdid.contract, event: "DeactivateDID", logs: logs, sub: sub}, nil
}

// WatchDeactivateDID is a free log subscription operation binding the contract event 0x2057c1bebefc71cf1116bc35105e72c4ec2baa1014a67f924edda51eee4565e8.
//
// Solidity: event DeactivateDID(string did)
func (_Accountdid *AccountdidFilterer) WatchDeactivateDID(opts *bind.WatchOpts, sink chan<- *AccountdidDeactivateDID) (event.Subscription, error) {

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "DeactivateDID")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidDeactivateDID)
				if err := _Accountdid.contract.UnpackLog(event, "DeactivateDID", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeactivateDID is a log parse operation binding the contract event 0x2057c1bebefc71cf1116bc35105e72c4ec2baa1014a67f924edda51eee4565e8.
//
// Solidity: event DeactivateDID(string did)
func (_Accountdid *AccountdidFilterer) ParseDeactivateDID(log types.Log) (*AccountdidDeactivateDID, error) {
	event := new(AccountdidDeactivateDID)
	if err := _Accountdid.contract.UnpackLog(event, "DeactivateDID", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidDeactivateVeriIterator is returned from FilterDeactivateVeri and is used to iterate over the raw logs and unpacked data for DeactivateVeri events raised by the Accountdid contract.
type AccountdidDeactivateVeriIterator struct {
	Event *AccountdidDeactivateVeri // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidDeactivateVeriIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidDeactivateVeri)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidDeactivateVeri)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidDeactivateVeriIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidDeactivateVeriIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidDeactivateVeri represents a DeactivateVeri event raised by the Accountdid contract.
type AccountdidDeactivateVeri struct {
	Did common.Hash
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterDeactivateVeri is a free log retrieval operation binding the contract event 0x671fd31386743fa44ce13617f8a8c357387671e6b9886278e67bbd2136d50ec6.
//
// Solidity: event DeactivateVeri(string indexed did, uint256 id)
func (_Accountdid *AccountdidFilterer) FilterDeactivateVeri(opts *bind.FilterOpts, did []string) (*AccountdidDeactivateVeriIterator, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "DeactivateVeri", didRule)
	if err != nil {
		return nil, err
	}
	return &AccountdidDeactivateVeriIterator{contract: _Accountdid.contract, event: "DeactivateVeri", logs: logs, sub: sub}, nil
}

// WatchDeactivateVeri is a free log subscription operation binding the contract event 0x671fd31386743fa44ce13617f8a8c357387671e6b9886278e67bbd2136d50ec6.
//
// Solidity: event DeactivateVeri(string indexed did, uint256 id)
func (_Accountdid *AccountdidFilterer) WatchDeactivateVeri(opts *bind.WatchOpts, sink chan<- *AccountdidDeactivateVeri, did []string) (event.Subscription, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "DeactivateVeri", didRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidDeactivateVeri)
				if err := _Accountdid.contract.UnpackLog(event, "DeactivateVeri", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeactivateVeri is a log parse operation binding the contract event 0x671fd31386743fa44ce13617f8a8c357387671e6b9886278e67bbd2136d50ec6.
//
// Solidity: event DeactivateVeri(string indexed did, uint256 id)
func (_Accountdid *AccountdidFilterer) ParseDeactivateVeri(log types.Log) (*AccountdidDeactivateVeri, error) {
	event := new(AccountdidDeactivateVeri)
	if err := _Accountdid.contract.UnpackLog(event, "DeactivateVeri", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidRemoveAssertionIterator is returned from FilterRemoveAssertion and is used to iterate over the raw logs and unpacked data for RemoveAssertion events raised by the Accountdid contract.
type AccountdidRemoveAssertionIterator struct {
	Event *AccountdidRemoveAssertion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidRemoveAssertionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidRemoveAssertion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidRemoveAssertion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidRemoveAssertionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidRemoveAssertionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidRemoveAssertion represents a RemoveAssertion event raised by the Accountdid contract.
type AccountdidRemoveAssertion struct {
	Did common.Hash
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRemoveAssertion is a free log retrieval operation binding the contract event 0x3e0a1fa337a30b1d302db25bc619c00f50e32e1ac195055458870ecf6a7662f4.
//
// Solidity: event RemoveAssertion(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) FilterRemoveAssertion(opts *bind.FilterOpts, did []string) (*AccountdidRemoveAssertionIterator, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "RemoveAssertion", didRule)
	if err != nil {
		return nil, err
	}
	return &AccountdidRemoveAssertionIterator{contract: _Accountdid.contract, event: "RemoveAssertion", logs: logs, sub: sub}, nil
}

// WatchRemoveAssertion is a free log subscription operation binding the contract event 0x3e0a1fa337a30b1d302db25bc619c00f50e32e1ac195055458870ecf6a7662f4.
//
// Solidity: event RemoveAssertion(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) WatchRemoveAssertion(opts *bind.WatchOpts, sink chan<- *AccountdidRemoveAssertion, did []string) (event.Subscription, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "RemoveAssertion", didRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidRemoveAssertion)
				if err := _Accountdid.contract.UnpackLog(event, "RemoveAssertion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveAssertion is a log parse operation binding the contract event 0x3e0a1fa337a30b1d302db25bc619c00f50e32e1ac195055458870ecf6a7662f4.
//
// Solidity: event RemoveAssertion(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) ParseRemoveAssertion(log types.Log) (*AccountdidRemoveAssertion, error) {
	event := new(AccountdidRemoveAssertion)
	if err := _Accountdid.contract.UnpackLog(event, "RemoveAssertion", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidRemoveAuthIterator is returned from FilterRemoveAuth and is used to iterate over the raw logs and unpacked data for RemoveAuth events raised by the Accountdid contract.
type AccountdidRemoveAuthIterator struct {
	Event *AccountdidRemoveAuth // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidRemoveAuthIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidRemoveAuth)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidRemoveAuth)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidRemoveAuthIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidRemoveAuthIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidRemoveAuth represents a RemoveAuth event raised by the Accountdid contract.
type AccountdidRemoveAuth struct {
	Did common.Hash
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRemoveAuth is a free log retrieval operation binding the contract event 0xf2d32726779f6b937767cdd53ca44340d0af922c6c637bdab215b304d902157b.
//
// Solidity: event RemoveAuth(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) FilterRemoveAuth(opts *bind.FilterOpts, did []string) (*AccountdidRemoveAuthIterator, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "RemoveAuth", didRule)
	if err != nil {
		return nil, err
	}
	return &AccountdidRemoveAuthIterator{contract: _Accountdid.contract, event: "RemoveAuth", logs: logs, sub: sub}, nil
}

// WatchRemoveAuth is a free log subscription operation binding the contract event 0xf2d32726779f6b937767cdd53ca44340d0af922c6c637bdab215b304d902157b.
//
// Solidity: event RemoveAuth(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) WatchRemoveAuth(opts *bind.WatchOpts, sink chan<- *AccountdidRemoveAuth, did []string) (event.Subscription, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "RemoveAuth", didRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidRemoveAuth)
				if err := _Accountdid.contract.UnpackLog(event, "RemoveAuth", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveAuth is a log parse operation binding the contract event 0xf2d32726779f6b937767cdd53ca44340d0af922c6c637bdab215b304d902157b.
//
// Solidity: event RemoveAuth(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) ParseRemoveAuth(log types.Log) (*AccountdidRemoveAuth, error) {
	event := new(AccountdidRemoveAuth)
	if err := _Accountdid.contract.UnpackLog(event, "RemoveAuth", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidRemoveDelegationIterator is returned from FilterRemoveDelegation and is used to iterate over the raw logs and unpacked data for RemoveDelegation events raised by the Accountdid contract.
type AccountdidRemoveDelegationIterator struct {
	Event *AccountdidRemoveDelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidRemoveDelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidRemoveDelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidRemoveDelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidRemoveDelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidRemoveDelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidRemoveDelegation represents a RemoveDelegation event raised by the Accountdid contract.
type AccountdidRemoveDelegation struct {
	Did common.Hash
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRemoveDelegation is a free log retrieval operation binding the contract event 0xc8c5be74dbecbc654092affff41a0d8109cef3213923e597b547241dc355cf2e.
//
// Solidity: event RemoveDelegation(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) FilterRemoveDelegation(opts *bind.FilterOpts, did []string) (*AccountdidRemoveDelegationIterator, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "RemoveDelegation", didRule)
	if err != nil {
		return nil, err
	}
	return &AccountdidRemoveDelegationIterator{contract: _Accountdid.contract, event: "RemoveDelegation", logs: logs, sub: sub}, nil
}

// WatchRemoveDelegation is a free log subscription operation binding the contract event 0xc8c5be74dbecbc654092affff41a0d8109cef3213923e597b547241dc355cf2e.
//
// Solidity: event RemoveDelegation(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) WatchRemoveDelegation(opts *bind.WatchOpts, sink chan<- *AccountdidRemoveDelegation, did []string) (event.Subscription, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "RemoveDelegation", didRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidRemoveDelegation)
				if err := _Accountdid.contract.UnpackLog(event, "RemoveDelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveDelegation is a log parse operation binding the contract event 0xc8c5be74dbecbc654092affff41a0d8109cef3213923e597b547241dc355cf2e.
//
// Solidity: event RemoveDelegation(string indexed did, string id)
func (_Accountdid *AccountdidFilterer) ParseRemoveDelegation(log types.Log) (*AccountdidRemoveDelegation, error) {
	event := new(AccountdidRemoveDelegation)
	if err := _Accountdid.contract.UnpackLog(event, "RemoveDelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidRemoveRecoveryIterator is returned from FilterRemoveRecovery and is used to iterate over the raw logs and unpacked data for RemoveRecovery events raised by the Accountdid contract.
type AccountdidRemoveRecoveryIterator struct {
	Event *AccountdidRemoveRecovery // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidRemoveRecoveryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidRemoveRecovery)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidRemoveRecovery)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidRemoveRecoveryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidRemoveRecoveryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidRemoveRecovery represents a RemoveRecovery event raised by the Accountdid contract.
type AccountdidRemoveRecovery struct {
	Did      common.Hash
	Recovery string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRemoveRecovery is a free log retrieval operation binding the contract event 0x40de7c6accd11e8883b27f5c2047d04862324bb82cc21180097aee971255fa40.
//
// Solidity: event RemoveRecovery(string indexed did, string recovery)
func (_Accountdid *AccountdidFilterer) FilterRemoveRecovery(opts *bind.FilterOpts, did []string) (*AccountdidRemoveRecoveryIterator, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "RemoveRecovery", didRule)
	if err != nil {
		return nil, err
	}
	return &AccountdidRemoveRecoveryIterator{contract: _Accountdid.contract, event: "RemoveRecovery", logs: logs, sub: sub}, nil
}

// WatchRemoveRecovery is a free log subscription operation binding the contract event 0x40de7c6accd11e8883b27f5c2047d04862324bb82cc21180097aee971255fa40.
//
// Solidity: event RemoveRecovery(string indexed did, string recovery)
func (_Accountdid *AccountdidFilterer) WatchRemoveRecovery(opts *bind.WatchOpts, sink chan<- *AccountdidRemoveRecovery, did []string) (event.Subscription, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "RemoveRecovery", didRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidRemoveRecovery)
				if err := _Accountdid.contract.UnpackLog(event, "RemoveRecovery", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveRecovery is a log parse operation binding the contract event 0x40de7c6accd11e8883b27f5c2047d04862324bb82cc21180097aee971255fa40.
//
// Solidity: event RemoveRecovery(string indexed did, string recovery)
func (_Accountdid *AccountdidFilterer) ParseRemoveRecovery(log types.Log) (*AccountdidRemoveRecovery, error) {
	event := new(AccountdidRemoveRecovery)
	if err := _Accountdid.contract.UnpackLog(event, "RemoveRecovery", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountdidUpdateVeriIterator is returned from FilterUpdateVeri and is used to iterate over the raw logs and unpacked data for UpdateVeri events raised by the Accountdid contract.
type AccountdidUpdateVeriIterator struct {
	Event *AccountdidUpdateVeri // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountdidUpdateVeriIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountdidUpdateVeri)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountdidUpdateVeri)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountdidUpdateVeriIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountdidUpdateVeriIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountdidUpdateVeri represents a UpdateVeri event raised by the Accountdid contract.
type AccountdidUpdateVeri struct {
	Did common.Hash
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterUpdateVeri is a free log retrieval operation binding the contract event 0x0b5c217a46ac23c52cf9217e0c43790834fe751d2e98488c23e5b79fe9c82efa.
//
// Solidity: event UpdateVeri(string indexed did, uint256 id)
func (_Accountdid *AccountdidFilterer) FilterUpdateVeri(opts *bind.FilterOpts, did []string) (*AccountdidUpdateVeriIterator, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.FilterLogs(opts, "UpdateVeri", didRule)
	if err != nil {
		return nil, err
	}
	return &AccountdidUpdateVeriIterator{contract: _Accountdid.contract, event: "UpdateVeri", logs: logs, sub: sub}, nil
}

// WatchUpdateVeri is a free log subscription operation binding the contract event 0x0b5c217a46ac23c52cf9217e0c43790834fe751d2e98488c23e5b79fe9c82efa.
//
// Solidity: event UpdateVeri(string indexed did, uint256 id)
func (_Accountdid *AccountdidFilterer) WatchUpdateVeri(opts *bind.WatchOpts, sink chan<- *AccountdidUpdateVeri, did []string) (event.Subscription, error) {

	var didRule []interface{}
	for _, didItem := range did {
		didRule = append(didRule, didItem)
	}

	logs, sub, err := _Accountdid.contract.WatchLogs(opts, "UpdateVeri", didRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountdidUpdateVeri)
				if err := _Accountdid.contract.UnpackLog(event, "UpdateVeri", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateVeri is a log parse operation binding the contract event 0x0b5c217a46ac23c52cf9217e0c43790834fe751d2e98488c23e5b79fe9c82efa.
//
// Solidity: event UpdateVeri(string indexed did, uint256 id)
func (_Accountdid *AccountdidFilterer) ParseUpdateVeri(log types.Log) (*AccountdidUpdateVeri, error) {
	event := new(AccountdidUpdateVeri)
	if err := _Accountdid.contract.UnpackLog(event, "UpdateVeri", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
